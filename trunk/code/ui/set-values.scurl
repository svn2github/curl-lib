||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
|||
|||     http://www.apache.org/licenses/LICENSE-2.0
|||
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @authors Hitoshi Okada
|||

{import * from CURL.LANGUAGE.REFLECTION}

|| TODO: fieldにユーザ定義クラスやコレクション等が存在する場合、ネストしてセットする（べき？）
{doc-next
    {purpose
        ユーザ定義クラスのオブジェクトのプロパティ（フィールド名もしくはゲッター名）と、
        コントロール（{docref ValueControl}）のname属性が一致する場合に、
        プロパティの値をコントロールの値（value）にセットします。
    }
    {parameter value, ユーザ定義クラスのオブジェクト}
    {parameter root, 対象のルートGraphic}
    {parameter search-superclasses?, スーパークラスを対象にするか否か}
    {parameter set-value-proc,
        対象のコントロールに値をセットプロシージャです。通常、値や型変換、スキップする際に利用します。
        (第1引数には対象のユーザ定義クラスのオブジェクト、
        第2引数には対象のプロパティ（{docref Property}）、第3引数には対象のコントロール)
    }
    {details
        以下はサンプルとなります。
        {curl-code
            |# Fooの例
            {define-class public Foo
              field public-get tf:String = "val"
              field public-get df:DateTime = {DateTime}
            }
            #|
            def foo = {Foo}
            def root =
                {VBox
                    {TextField name="tf"},
                    {DateField name="df"}
                }
            {set-values-to-graphic foo, root}
            || TextField（nameがtf）には"val"が、
            || DateField(nameがdf)にはFooのdfがセットされます。
        }
    }
    {notes 対象のコントロールはValueControlを継承されている必要があります。}
}
{define-proc public inline {set-values-to-controls
                               value:any,
                               root:Graphic,
                               search-superclasses?:bool = true,
                               set-value-proc:{proc-type {any, Property, ValueControl}:void} =
                                   {fn v, p, c =>
                                       {if p.name == c.name then
                                           set c.value-as-any = {p.get-value v}
                                       }
                                   }
                           }:void
    {for m in {({type-of value} asa ClassType).get-members
                  filter = ClassMember.get-property-filter,
                  search-superclasses? = search-superclasses?
              }
     do
        def p = m asa Property
        {walk-graphics
            root,
            {fn g =>
                {if g isa ValueControl then
                    {set-value-proc value, p, (g asa ValueControl)}
                }
            }
        }
    }
}

{doc-next
    {purpose
        ユーザ定義クラスのオブジェクトのプロパティ（フィールド名もしくはゲッター名）と
        コントロール（{docref ValueControl}）のname属性が一致する場合に、
        コントロールの値（value）をユーザ定義クラスのプロパティにセットします。
    }
    {parameter root, 対象のルートGraphic}
    {parameter value, ユーザ定義クラスのオブジェクト}
    {parameter search-superclasses?, スーパークラスを対象にするか否か}
    {parameter set-value-proc,
        対象のユーザ定義クラスのオブジェクトに値をセットするプロシージャです。
        通常、値や型変換、スキップする際に利用します。
        (第1引数には対象のコントロール、第2引数には対象のユーザ定義クラスのオブジェクト、
        第3引数には対象のプロパティ（{docref Property}）)
    }
    {details
        以下はサンプルとなります。
        {curl-code
            |# Fooの例
            {define-class public Foo
              field public tf:String = ""
              field public df:#DateTime = null
            }
            #|
            def foo = {Foo}
            def root =
                {VBox
                    {TextField name="tf", value="val"},
                    {DateField name="df", value={DateTime}}
                }
            {set-values-from-graphic root, foo}
            || Fooのtfフィールドには"val"が、
            || FooのdfフィールドにはDateField(nameがdf)の値がセットされます。
        }
    }
    {notes 対象のコントロールはValueControlを継承されている必要があります。}
}
{define-proc public inline {set-values-from-controls
                               root:Graphic,
                               value:any,
                               search-superclasses?:bool = true,
                               set-value-proc:{proc-type {ValueControl, any, Property}:void} =
                                   {fn c, v, p =>
                                       {if p.name == c.name then
                                           {p.set-value v, c.value-as-any}
                                       }
                                   }
                           }:void
    {for m in {({type-of value} asa ClassType).get-members
                  filter = ClassMember.set-property-filter,
                  search-superclasses? = search-superclasses?
              }
     do
        def p = m asa Property
        {walk-graphics
            root,
            {fn g =>
                {if g isa ValueControl then
                    {set-value-proc (g asa ValueControl), value, p}
                }
            }
        }
    }
}
