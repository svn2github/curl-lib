||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @authors Yoshitaka Fukuta
|||

{curl-file-attributes character-encoding = "utf8"}

{doc-next {purpose {docref MessageList} によって管理されるメッセージテンプレート。}}
{define-value-class public final serializable MessageTemplate

  {doc-next {purpose メッセージID。}}
  field public constant id:String

  {doc-next {purpose メッセージテンプレート。}}
  field public constant template:String

  field private constant _placeholder-count:int

  {constructor public {default id:String, template:String}
    set self.id = id
    set self.template = template
    set self._placeholder-count = {self.count-placeholder template}
  }

  {doc-next {purpose プレースホルダ ({ctext %s}) の数。}}
  {getter public {placeholder-count}:int
    {return self._placeholder-count}
  }

  {doc-next
    {purpose メッセージを組み立てます。}
    {parameter ..., 埋め込み文字列。}
  }  
  {method public {create-message ...:String}:String
    def fillers = {value
                      def sv = {StringVec ...}
                      {sv.reverse}
                      sv
                  }
    def template = self.template
    def len = template.size
    def message = {StringBuf}
    {for i:int = 0 below len do
        def c = template[i]
        {if c == '%' and (i + 1) < len then
            {switch template[i + 1]
             case 's' do
                {if fillers.size > 0 then
                    {message.concat {fillers.pop}}
                    {inc i}
                    {continue}
                }
             case '%' do
                {if (i + 2) < len and template[i + 2] == 's' then
                    {message.concat "%s"}
                    {inc i, 2}
                    {continue}
                }
            }
        }
        {message.append c}
    }
    {return {message.to-String}}
  }

  || 'template' に含まれる "%s" の数を返す
  || (エスケープされたプレースホルダ"%%s"はカウントしない)
  {method private {count-placeholder template:String}:int
    let count:int = 0
    {for c key i in template do
        {if c == '%' and
            ( i + 1 < template.size ) and ( template[i + 1] == 's' ) and
            (( i == 0 ) or ( template[i - 1] != '%' ))
         then
            {inc count}
        }
    }
    {return count}
  }

}
