||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @authors Yoshitaka Fukuta
|||

{curl-file-attributes character-encoding = "utf8"}

{doc-next
    {purpose {docref MessageTemplate} のリスト。}
}
{define-class public serializable MessageList

  field private constant mapping:{HashTable-of String, MessageTemplate}

  {doc-next
    {purpose
        {ctext MessageList} を生成します。
    }
    {parameter ...,
        メッセージIDとメッセージテンプレートのペアをカンマ区切りで指定します。
    }
    {for-example
        残余引数にはメッセージIDとメッセージのペアを指定します。
        メッセージ中の {ctext %s} は埋め込み文字のプレースホルダとして認識されます。
        {curl-code
            {MessageList
                "MSG0001", "エラー",
                "MSG0002", "%s件、登録しました。",
                "MSG0003", "システムエラー"           
            }
        }
    }
  }
  {constructor public {default ...:String}
    def args = {StringStringTable {splice ...}}
    set self.mapping = {new {HashTable-of String, MessageTemplate}}
    {for tmpl key id in args do
        {self.add-template {MessageTemplate id, tmpl}}
    }
  }

  {doc-next
    {purpose
        {param loc} の内容を評価して {ctext MessageList} を返します。
    }
  }
  {factory public {import loc:Url}:MessageList
    {return
        {evaluate
            loc,
            package = {OpenPackage {this-package}}
        } asa MessageList
    }
  }

  {method public {get id:String}:MessageTemplate
    {return self.mapping[id]}
  }

  {method public {remove id:String, error-if-missing?:bool = true}:void
    {self.mapping.remove id, error-if-missing? = error-if-missing?}
  }

  {method public {add-template template:MessageTemplate}:void
    set self.mapping[template.id] = template
  }

  {doc-next
    {purpose 別の {ctext MessageList} の内容をマージします。}
  }
  {method public {merge ...:MessageList}:void
    {for another in ... do
        {if another == self then {break}}
        {for tmpl in another.mapping do
            {self.add-template tmpl}
        }
    }
  }
  
}
