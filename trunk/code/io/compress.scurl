||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @authors Hitoshi Okada
|||

{import * from CURL.IO.ZSTREAM}

|| pack/unpack
|| TODO: zip/lzh
{doc-next
    {purpose 圧縮します。}
    {details
        {curl-code
            {compress
                {read-open-byte "test.txt"},
                {write-open-byte "test.gzip"}
            }
        }
    }
}
{define-proc public inline {compress
                               bis:ByteInputStream,
                               bos:ByteOutputStream,
                               compression-format:CompressionFormat = CompressionFormat.gzip,
                               is-close-stream?:bool = true
                           }:void
    {try
        {with-open-streams
            ibos = {DeflateByteOutputStream
                       bos, compression-format = compression-format}
         do
            {ibos.write {bis.read}}
            {ibos.flush}
        }
     catch e:Exception do
        {throw e}
     finally
        {if is-close-stream? then
            {bis.close}
            {bos.close}
        }
    }
}

{doc-next
    {purpose 解凍します。}
    {details
        {curl-code
            {uncompress
                {read-open-byte "test.gzip"},
                {write-open-byte "test.txt"}
            }
        }
    }
}
{define-proc public inline {uncompress
                               bis:ByteInputStream,
                               bos:ByteOutputStream,
                               compression-format:CompressionFormat = CompressionFormat.gzip,
                               is-close-stream?:bool = true
                           }:void
    {try
        {with-open-streams
            ibis = {InflateByteInputStream
                       bis, compression-format = compression-format}
         do
            {bos.write {ibis.read}}
            {bos.flush}
        }
     catch e:Exception do
        {throw e}
     finally
        {if is-close-stream? then
            {bis.close}
            {bos.close}
        }
    }
}





