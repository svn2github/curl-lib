||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
|||
|||     http://www.apache.org/licenses/LICENSE-2.0
|||
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @authors Yerui
|||   (Modified by Hitoshi Okada)


|| The difference algorithm  (since 0.7)

{doc-next {purpose 最小手順（共通、削除、追加）}}
{define-enum public ShortestEditScript
    common, || 共通
    added,  || 削除
    deleted || 追加
}

{doc-next
    {purpose 文字列と文字列の差分を取得します。}
    {parameter str1, 変更前の文字列}
    {parameter str2, 変更後の文字列}
    {parameter p, diff解析結果の差分文字を取得するためのプロシージャ}
    {details
        {curl-code
            || 以下の場合、apが共通、mが削除、pleが追加された文字と認識される。
            {diff
                "map", "apple",
                {fn ses, o, n, p1, p2 =>
                    {switch ses
                     case ShortestEditScript.common do
                        {output "common:" & o}
                     case ShortestEditScript.added do
                        {output "appended:" & n}
                     case ShortestEditScript.deleted do
                        {output "deleted:" & o}
                    }
                }
            }
        }
    }
}
{define-proc public inline {diff
                               str1:String, || old chars
                               str2:String, || new chars
                               p:{proc-type
                                     {ses:ShortestEditScript, || SES
                                      c1:char,  || old char
                                      c2:char,  || new char
                                      pos1:int, || old char's position
                                      pos2:int  || new char's position
                                     }:void
                                 }
                           }:void
    
    let (sed:{Array-2-of int}, pos1:int, pos2:int) = {calc-distance str1, str2}
    def s1 = {{str1.to-InputStream}.read}.underlying-FastArray
    def s2 = {{str2.to-InputStream}.read}.underlying-FastArray
    def (len1, len2) = (s1.size, s2.size)

    || deleted char in old string.
    {for i = 0 below pos1 do
        {p ShortestEditScript.deleted, s1[i], 0x0000, i, -1}
    }
    || added char in new string.
    {for i = 0 below pos2 do
        {p ShortestEditScript.added, 0x0000, s2[i], -1, i}
    }
    {for tag = out, i = pos2 below len2 do
        {for j = pos1 below len1 do
            {if sed[i, j] == -1 then
                || added char
                {p ShortestEditScript.added, 0x0000, s2[i], -1, i}
                set (pos1, pos2) = (j, i)
                {break}
             elseif sed[i, j] == 0 then
                || stayed char(no changed)
                {p ShortestEditScript.common, s2[i], s1[j], j, i}
                set (pos1, pos2) = (j + 1, i)
                {break}
             elseif sed[i, j] == 1 then
                || deleted char
                {p ShortestEditScript.deleted, s1[j], 0x0000, j, -1}
             else
                {unreachable}
            }
            || reach the last position of new string
            {if len1 == j + 1 then
                {break tag = out}
            }
        }
    }
    {if pos2 == len2 - 1 then
        || As new chars reach to end, deleted char from old ones.
        {for i = pos1 below len1 do
            {p ShortestEditScript.deleted, s1[i], 0x0000, i, -1}
        }
     else
        || As old chars reach to end, added char in new ones.
        {for i = pos2 + 1 below len2 do
            {p ShortestEditScript.added, 0x0000, s2[i], -1, i}
        }
    }
}

|| calclate distance for diff.
{define-proc package inline {calc-distance
                                str1:String,
                                str2:String
                            }:({Array-2-of int}, int, int)
    def s1 = {{str1.to-InputStream}.read}.underlying-FastArray
    def s2 = {{str2.to-InputStream}.read}.underlying-FastArray
    def (len1, len2) = (s1.size, s2.size)
    
    def vlrs = {{Array-2-of int} len2 + 1, len1 + 1}
    def (nlrs, dlrs, sed) = ({vlrs.clone}, {vlrs.clone}, {vlrs.clone})
    let (min-d:int64, max-n:int) = (max-int64, 0)
    let (pos1:int, pos2:int) = (0, 0)

    {for i = len2 - 1 downto 0 do
        {for j = len1 - 1 downto 0 do
            def vlr = {if s2[i] == s1[j] then 1 else 0}
            set nlrs[i, j] = {max nlrs[i + 1, j + 1] + vlr, nlrs[i, j + 1], nlrs[i + 1, j]}
            {if vlr == 1 then
                set dlrs[i, j] = dlrs[i + 1, j + 1] + 1
                set sed[i, j] = 0 || no changed
                {if nlrs[i, j] > max-n then
                    set max-n = nlrs[i, j]
                    set vlrs[i, j] = 1 
                }
             else
                {if nlrs[i, j + 1] >= nlrs[i + 1, j] then
                    set dlrs[i, j] = dlrs[i, j + 1]
                    set sed[i, j] = 1 || deleted
                 else
                    set dlrs[i, j] = dlrs[i + 1, j] + 1
                    set sed[i, j] = -1 || added
                }
            }
        }
    }
    {if len1 == 0 or len2 == 0 then
        set (pos1, pos2) = (len1, len2)
     else
        {for i = 0 to len2 do
            {if vlrs[i, 0] == 1 and dlrs[i, 0] < min-d and nlrs[i, 0] == max-n
             then
                set (pos1, pos2) = (0, i)
                set min-d = dlrs[i, 0]
            }
        }
        {for j = 0 to len1 do
            {if vlrs[0, j] == 1 and dlrs[0, j] < min-d and nlrs[0, j] == max-n then
                set (pos1, pos2) = (j, 0)
                set min-d = dlrs[0, j]
            }
        }
    }
    {return (sed, pos1, pos2)}
}