||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @authors Hitoshi Okada
|||

{import SerializeInputStream, SerializeOutputStream from CURL.IO.SERIALIZE}

{doc-next
    {purpose RecordSetのユーティリティ}
}
{define-class public open RecordSetUtil

  {doc-next
    {purpose {docref RecordSet} のクローンを作成します。}
    {parameter sourse, 対象となる {docref RecordSet}。}
    {return-vals クローン}
    {notes
        {docref EventHandler}は引き継がれません。
    }
  }
  {define-proc public inline {clone
                                 source:RecordSet
                             }:RecordSet
    def clone =
        {RecordSet source.fields, modifiable? = source.modifiable?}
    {for record in source do
        def record-data = {RecordData}
        {for field in clone.fields do
            def field-name = field.name
            set record-data[field-name] = record[field-name]
        }
        {clone.append record-data}
    }
    {clone.commit}
    {return clone}
  }

  {doc-next
    {purpose {docref RecordSet}の中身をコンソールに表示します。}
    {parameter rs, 対象となる {docref RecordSet}。}
    {parameter show-field?, フィールドを表示するか否か}
  }
  {define-proc public inline {output
                                 rs:RecordSet,
                                 show-field?:bool = true
                             }:void
    def fields = rs.fields
    {if show-field? then
        def buf = {StringBuf}
        {for i:int = 0 below fields.size do
            {if i != 0 then
                {buf.concat ", "}
            }
            {buf.concat {fields.get-by-index i}.name}
        }
        {output buf}
    }
    {for r in rs do
        def buf = {StringBuf}
        {for i:int = 0 below fields.size do
            {if i != 0 then
                {buf.concat ", "}
            }
            def name = {fields.get-by-index i}.name
            {buf.concat r[name] & ""}
        }
        {output buf}
    }
  }
  
  {doc-next
    {purpose 2つの{docref RecordSet}が同一か否かをチェックします。}
    {parameter rs1, 対象となる {docref RecordSet}。}
    {parameter rs2, 対象となる {docref RecordSet}。}
    {return-vals 同一の場合true}
    {notes
        {docref RecordFields}とデータのみチェックされますが、
        {docref EventHandler}はチェックされません。
    }
  }
  {define-proc public inline {equal?
                                 rs1:RecordSet,
                                 rs2:RecordSet
                             }:bool
    {if rs1 == rs2 then
        {return true}
    }
    {if rs1.size != rs2.size then
        {return false}
    }
    || fields
    {if not {RecordSetUtil.equal-fields? rs1.fields, rs2.fields} then
        {return false}
    }
    || sort
    def sort-buf = {StringBuf}
    def fields = rs1.fields
    {for i:int = 0 below fields.size do
        {if i != 0 then
            {sort-buf.append ','}
        }
        {sort-buf.concat {fields.get-by-index i}.name}
    }
    def sort = {RecordSort.from-string {sort-buf.to-String}}
    || record datas
    def rv1 = {RecordView rs1, sort = sort}
    def rv2 = {RecordView rs2, sort = sort}
    {for i:int = 0 below rv1.size do
        {if not {RecordUtil.equal? {rv1.get i}, {rv2.get i}} then
            {return false}
        }
    }
    {return true}
  }
  
  {doc-next
    {purpose 2つの{docref RecordFields}が同一か否かをチェックします。}
    {parameter fs1, 対象となる {docref RecordFields}。}
    {parameter fs2, 対象となる {docref RecordFields}。}
    {return-vals 同一の場合true}
  }
  {define-proc public inline {equal-fields?
                                 fs1:RecordFields,
                                 fs2:RecordFields
                             }:bool
    {if fs1 == fs2 then
        {return true}
    }
    {if fs1.size != fs2.size then
        {return false}
    }
    {for i:int = 0 below fs1.size do
        def f1 = {fs1.get-by-index i}
        def f2 = {fs2.get-by-index i}
        {if not {RecordFieldUtil.equal? f1, f2} then
            {return false}
        }
    }
    {return true}
  }

  {doc-next
    {purpose {docref RecordSet}にリストデータを挿入します。}
    {parameter rs, 挿入先の{docref RecordSet}}
    {parameter arrays, 挿入する{curl-code {Array-of Array}}}
    {parameter commit?, 挿入後、commitするか否か}
  }
  {define-proc public inline {append-arrays
                                 rs:RecordSet,
                                 arrays:{Array-of Array},
                                 commit?:bool = true
                             }:void
    def fields = rs.fields
    {for array in arrays do
        {assert fields.size == array.size}
        def record-data = {RecordData}
        {for i:int = 0 below array.size do
            def field-name = {fields.get-by-index i}.name
            set record-data[field-name] = array[i]
        }
        {rs.append record-data}
    }
    {if commit? then
        {rs.commit}
    }
  }

  {doc-next
    {purpose {docref RecordSet}に{docref HashTable-of}データを挿入します。}
    {parameter rs, 挿入先の{docref RecordSet}}
    {parameter hashtables, 挿入する{curl-code {Array-of {HashTable-of String, any}}}}
    {parameter commit?, 挿入後、commitするか否か}
  }
  {define-proc public inline {append-hashtables
                                 rs:RecordSet,
                                 hashtables:{Array-of {HashTable-of String, any}},
                                 commit?:bool = true
                             }:void
    {for hashtable in hashtables do
        def record-data = {RecordData}
        {for v key k in hashtable do
            set record-data[k] = v
        }
        {rs.append record-data}
    }
    {if commit? then
        {rs.commit}
    }
  }

  || TODO: append from DTO to RecordSet (or Integrate with {append} proc)
||--  {define-proc public inlein {append-dto || append-object
||--                                 rs:Recordset,
||--                                 dto:any,
||--                                 commit?:bool = true
||--                             }:void
||--    {error "Not implemented yet"}
||--  }

  || TODO: append from DTOs to RecordSet
||--  {define-proc public inlein {append-dtos || append-objects
||--                                 rs:Recordset,
||--                                 dtos:{Array-of any},
||--                                 commit?:bool = true
||--                             }:void
||--    {error "Not implemented yet"}
||--  }
  
  {doc-next
    {purpose {docref RecordSet}から{curl-code {Array-of Array}}を生成します。}
    {parameter rs, {docref RecordSet}}
    {return-vals 生成された配列}
    {notes 列の順序は{docref RecordFields}順ですが、行の順序は保障されません。}
  }
  {define-proc public inline {to-arrays
                                 rs:RecordSet
                             }:{Array-of Array}
    def arrays = {{Array-of Array}}
    def fields = rs.fields
    {for r in rs do
        def array = {Array}
        {for f in fields do
            {array.append r[f.name]}
        }
        {arrays.append array}
    }
    {return arrays}
  }
  
  {doc-next
    {purpose {docref RecordSet}から{curl-code {Array-of {HashTable-of String, any}}}を生成します。}
    {parameter rs, {docref RecordSet}}
    {return-vals 生成された配列}
    {notes 行の順序は保障されません。}
  }
  {define-proc public inline {to-hashtables
                                 rs:RecordSet
                             }:{Array-of {HashTable-of String, any}}
    def arrays = {{Array-of {HashTable-of String, any}}}
    def fields = rs.fields
    {for r in rs do
        def hashtable = {{HashTable-of String, any}}
        {for f in fields do
            def name = f.name
            {hashtable.set name, r[name]}
        }
        {arrays.append hashtable}
    }
    {return arrays}
  }

  || TODO: create DTO objects from RecordSet
||--  {define-proc public inline {to-dtos ||to-objects
||--                                 rs:RecordSet
||--                             }:{Array-of any}
||--    {error "Not implemented yet"}
||--  }
  
  {doc-next
    {purpose 1列を配列で抜き出します。}
    {parameter rs, 対象となる {docref RecordSet}。}
    {parameter field, 抜き出すフィールド。}
    {return-vals 抜き出した列のデータを格納した {docref FastArray} を返します。}
  }
  {define-proc public inline {column-to-FastArray
                                 rs:RecordSet,
                                 field:RecordField || or field:String
                             }:FastArray || FastArray-of xxx
    def field-name = field.name
    def field-type = field.domain.type 
    || TODO: support {FastArray-of xxx}
    def result = {FastArray max-size = rs.size}
    {for record in rs do
        {result.append record[field-name] asa field-type}
    }
    {return result}
  }

  {doc-next
    {purpose {docref RecordSet} のサブセットを返します。}
    {parameter rs, 対象となる {docref RecordSet}。}
    {parameter fields, サブセットで使用する {docref RecordFields}。}
    {return-vals 指定されたデータとフィールドで構成される新しい {docref RecordSet} を返します。}
  }
  {define-proc public inline {subset
                                 rs:RecordSet,
                                 fields:RecordFields || or fields:StringArray or ...:String
                             }:RecordSet
    def subset = {RecordSet fields, modifiable? = rs.modifiable?}
    {for record in rs do
        def record-data = {RecordData}
        {for field in fields do
            def field-name = field.name
            set record-data[field-name] = record[field-name]
        }
        {subset.append record-data}
    }
    {subset.commit}
    {return subset}
  }

  {doc-next
    {purpose {docref RecordSet}に一行追加します。}
    {parameter rs, 対象となる {docref RecordSet}。}
    {parameter ..., 対象のデータ。{curl-code id=1, name="Okada", date={DateTime}} のように指定します。}
    {details
        {curl-code
            || RecordSet(record-set）に1行挿入
            {RecordSetUtil.append rs, col1 = 1, col2 = "test10"}
        }
    }
  }
  {define-proc public inline {append
                                 rs:RecordSet,
                                 ...
                             }:void
    {rs.append {RecordData ...}}
  }

  {doc-next
    {purpose {docref RecordSet}の条件にマッチする行をすべて変更します。}
    {parameter rs, 対象となる {docref RecordSet}。}
    {parameter condition, 条件を指定します。デフォルトは全件対象となります。}
    {parameter ..., 対象のデータ。{curl-code id=1, name="Okada", date={DateTime}} のように指定します。}
    {details
        {curl-code
            || RecordSet(record-set)のcol1フィールドが10のもののcol2フィールドをxxxxで更新し、
            || col3フィールドを現在日付に更新する
            {RecordSetUtil.modify
                record-set,
                condition = {proc {r:Record}:bool
                                {return r["col1"] == 10}
                            },
                col2 = "xxxx", col3 = {DateTime}
            }
        }
    }
  }
  {define-proc public inline {modify
                                 rs:RecordSet,
                                 condition:#{proc-type {Record}:bool} = null,
                                 ...
                             }:int
    def target-rs = {rs.select filter = condition}
    def target-size = target-rs.size
    def args = {Arguments ...}
    {for r in target-rs do
        {for i:int = 0 below args.num-keyword-args do
            def (arg, key) = args[i]
            {if-non-null k = key then
                set r[k] = arg
             else
                {error "キーワード引数ではありません。"}
            }
        }
    }
    {return target-size}
  }

  {doc-next
    {purpose {docref RecordSet}の条件にマッチする行をすべて削除します。}
    {parameter rs, 対象となる {docref RecordSet}。}
    {parameter condition, 条件を指定します。デフォルトは全件対象となります。}
    {details
        以下のように利用します。
        {curl-code
            || RecordSet(record-set)からcol1フィールドが10のものをすべて削除
            {RecordSetUtil.delete
                record-set,
                condition = {proc {r:Record}:bool 
                                {return r["col1"] == 10}
                            }
            }
        }
    }
  }
  {define-proc public inline {delete
                                 rs:RecordSet,
                                 condition:#{proc-type {Record}:bool} = null
                             }:int
    {return 
        {if condition == null then
            def target-size = rs.size
            {rs.delete-all}
            target-size
         else
            def target-rs = {rs.select filter = condition}
            def target-size = target-rs.size
            {for r in target-rs do
                {r.delete}
            }
            target-size
        }
    }
  }

  {doc-next
    {purpose {docref RecordSet}の条件にマッチする行をすべて取得します。}
    {parameter rs, 対象となる {docref RecordSet}。}
    {parameter condition, 条件を指定します。デフォルトは全件対象となります。}
    {parameter order-by, ソート条件。RecordSort.from-stringの引数のように指定します。}
    {details
        {curl-code
            || RecordSet（record-set）からcol1が20のものを取得します。（col2, col3でソート）
            {RecordSetUtil.select
                record-set,
                condition = {proc {r:Record}:bool
                                {return r["col1"] == 20}
                            },
                order-by = "col2, col3"
            }
        }
    }
  }
  {define-proc public inline {select
                                 rs:RecordSet,
                                 condition:#{proc-type {Record}:bool} = null,
                                 order-by:#String = null || sort
                             }:{Array-of Record}
    || TODO: group by
    def v =
        {if-non-null sort = order-by then
            {RecordView rs, sort = {RecordSort.from-string sort}}
         else
            rs
        }
    {return {v.select filter = condition}}
  }

  {doc-next
    {purpose {docref RecordSet}の条件にマッチする件数を取得します。}
    {parameter rs, 対象となる {docref RecordSet}。}
    {parameter condition, 条件を指定します。デフォルトは全件対象となります。}
  }
  {define-proc public inline {select-count
                                 rs:RecordSet,
                                 condition:#{proc-type {Record}:bool} = null
                             }:int
    {return
        {if condition == null then
            rs.size
         else
            {RecordSetUtil.select rs, condition = condition}.size
        }
    }
  }
  
  {doc-next
    {purpose {docref RecordSet}に追加された行をすべて取得します。（commitされていない行）}
    {parameter rs, 対象となる {docref RecordSet}。}
  }
  {define-proc public inline {appended-records
                                 rs:RecordSet
                             }:{Array-of Record}
    {return 
        {rs.select
            filter =
                {RecordFilter
                    {proc {r:Record}:bool
                        {return (r asa BasicRecord).state == RecordState.appended}
                    }
                }
        }
    }
  }

  {doc-next
    {purpose {docref RecordSet}に更新された行をすべて取得します。（commitされていない行）}
    {parameter rs, 対象となる {docref RecordSet}。}
  }
  {define-proc public inline {modified-records
                                 rs:RecordSet
                             }:{Array-of Record}
    || NOTE: 変更前のデータ（値）を取得する場合は、
    ||       {Record.get "col1", pending = false}にて取得可能
    {return 
        {rs.select
            filter =
                {RecordFilter
                    {proc {r:Record}:bool
                        {return (r asa BasicRecord).state == RecordState.modified}
                    }
                }
        }
    }
  }

  {doc-next
    {purpose {docref RecordSet}に削除された行をすべて取得します。（commitされていない行）}
    {parameter rs, 対象となる {docref RecordSet}。}
  }
  {define-proc public inline {deleted-records
                                 rs:RecordSet
                             }:{Array-of Record}
    {return 
        {rs.select
            filter =
                {RecordFilter
                    {proc {r:Record}:bool
                        {return (r asa BasicRecord).state == RecordState.deleted}
                    }
                }
        }
    }
  }

  {doc-next
    {purpose {docref RecordSet}を{docref SerializeOutputStream}に書き出します。}
    {parameter out, {docref SerializeOutputStream}}
    {parameter content, {docref RecordSet}}
    {details パラメータについては、{docref write-open-byte}プロシージャを参照ください。}
    {notes フィールドとデータを保存します。但しイベントハンドラや状態は保存できません。}
  }
  {define-proc public {write-to-stream
                          out:SerializeOutputStream,
                          content:RecordSet
                      }:void
    || fields
    def fields = content.fields
    def field-size = fields.size
    {out.write-one fields.size} || size
    {for i:int = 0 below field-size do
        def f = {fields.get-by-index i}
        {out.write-one f.name}
        {out.write-one f.caption}
        {out.write-one f.domain.type}
        {out.write-one f.modifiable?}
        {out.write-one f.nullable?}
        {out.write-one
            {if f.default-value == f.domain.default-value or
                f.default-value == null
             then
                null
             else
                f.default-value
            }
        } ||f.default-value}
        {out.write-one f.index-type}
    }

    || records
    {out.write-one content.size} || size
    {for r in content do
        {for i:int = 0 below field-size do
            def f = {fields.get-by-index i}
            {out.write-one r[f.name]}
        }
    }

    || modifiable?
    {out.write-one content.modifiable?}
    {out.flush}
  }

  {doc-next
    {purpose SerializeInputStreamから{docref RecordSet}を取り出します。}
    {parameter in, {docref SerializeInputStream}}
    {parameter domain-from-type,
        {docref Type}から、カスタマイズされた{docref Domain}を生成するプロシージャ}
    {details {docref RecordSet}を書き出す場合は、{docref write-to-stream}を利用してください。}
    {notes 但しイベントハンドラや状態は復帰できません。}
  }
  {define-proc public inline {read-from-stream
                                 in:SerializeInputStream,
                                 domain-from-type:{proc-type {Type}:Domain} =
                                     {fn t => {Domain.from-type t}}
                             }:RecordSet
    def field-size = {in.read-one} asa int
    def fields = {{Array-of RecordField}}
    {for i:int = 0 below field-size do
        def name = {in.read-one} asa String
        def caption = {in.read-one} asa String
        def domain = {domain-from-type {in.read-one} asa Type}
        def modifiable? = {in.read-one} asa bool
        def nullable? = {in.read-one} asa bool
        def default-value =
            {if-non-null dv = {in.read-one} then
                dv
             else
                {if nullable? then
                    null
                 else
                    domain.default-value
                }
            }
        def index-type = {in.read-one} asa RecordFieldIndexType
        {fields.append
            {RecordField
                name,
                caption = caption,
                domain = domain,
                modifiable? = modifiable?,
                nullable? = nullable?,
                default-value = default-value,
                index-type = index-type
            }
        }
    }

    || records
    def record-size = {in.read-one} asa int
    def records = {{Array-of RecordData}}
    {for i:int = 0 below record-size do
        def rd = {RecordData}
        {for f in fields do
            set rd[f.name] = {in.read-one}
        }
        {records.append rd}
    }

    {return
        {RecordSet
            {RecordFields {splice fields}},
            modifiable? = {in.read-one} asa bool,
            {splice records}
        }
    }
  }

  || TODO: join, group-by ...etc
||--  {doc-next
||--    {purpose 2つの {docref RecordSet} を結合し、新しい {docref RecordSet} を返します。}
||--    {parameter source, 対象となる {docref RecordSet}。}
||--    {parameter join-source, 対象となる {docref RecordSet}。}
||--    {parameter conditions, 結合する条件。}
||--    {return-vals 新しい {docref RecordSet} を返します。}
||--  }
||--  {define-proc public inline {join
||--                                 rs:RecordSet,
||--                                 join-source:RecordSet,
||--                                 conditions:any || HashTable?, keyword args?
||--                             }:RecordSet
||--    ||  TODO: inner join, outer join
||--    {return rs}
||--  }
||--
||--  {doc-next
||--    {purpose 指定された {docref RecordFields} 内での重複を排除します。}
||--    {parameter source, 対象となる {docref RecordSet}。}
||--    {parameter fields, 重複を排除する条件となる {docref RecordFields}。}
||--  }
||--  {define-proc public inline {group-by
||--                                 rs:RecordSet,
||--                                 fields:RecordFields
||--                             }:void
||--    || TODO: sort
||--  }
||--
||--  {doc-next
||--    {purpose 指定された {docref RecordFields} 内での重複を排除し、{docref RecordSet} を返します。}
||--    {parameter source, 対象となる {docref RecordSet}。}
||--    {parameter fields, 重複を排除する条件となる {docref RecordFields}。}
||--    {return-vals 新しい {docref RecordSet} を返します。}
||--  }
||--  {define-proc public inline {group-by-clone
||--                                 rs:RecordSet,
||--                                 fields:RecordFields
||--                             }:RecordSet
||--    || TODO:
||--    {return rs}
||--  }
||--
||--  {doc-next
||--    {purpose {docref RecordSetからツリーを作成}}
||--  }
||--  {define-proc public inline {to-TreeModel
||--                                 rs:RecordSet
||--                             }:TreeModel
||--    || TODO
||--    {return {TreeModel}}
||--  }
}
