||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @authors Hitoshi Okada
|||

||
|| Recordのユーティリティ
||

{import * from CURL.LANGUAGE.REFLECTION}

{doc-next {purpose Recordのユーティリティ}}
{define-class public open RecordUtil
  
  {doc-next
    {purpose 2つの{docref Record}が同一か否かをチェックします。}
    {parameter rd1, 対象となる {docref Record}。}
    {parameter rd2, 対象となる {docref Record}。}
    {return-vals 同一の場合true}
  }
  {define-proc public inline {equal?
                                 rd1:Record,
                                 rd2:Record
                             }:bool
    {if-non-null rs = rd1.record-set then
        {for f in rs.fields do
            def name = f.name
            {if rd1[name] != rd2[name] then
                {return false}
            }
        }
        {return true}
    }
    {return false}
  }
  
  {doc-next
    {purpose {docref Record}の値をデータクラスにセットします。}
    {parameter r, {docref Record}}
    {parameter dto, データクラス}
    {parameter search-superclasses?, スーパークラスを対象にするか否か}
    {notes データクラスのプロパティ名とRecordSetのフィールド名が一致する必要があります。}
  }
  {define-proc public inline {set-values
                                 r:Record,
                                 dto:any,
                                 search-superclasses?:bool = true,
                                 set-value-proc:{proc-type {Record, any, Property}:void} =
                                     {fn r, v, p =>
                                         {p.set-value v, r[p.name]}
                                     }
                             }:void
    || TODO: fieldにユーザ定義クラスやコレクション等が存在する場合、ネストしてセットする（べき？）
    {for m in {({type-of dto} asa ClassType).get-members
                  filter = ClassMember.set-property-filter,
                  search-superclasses? = search-superclasses?
              }
     do
        {set-value-proc r, dto, (m asa Property)}
    }
  }

  {doc-next
    {purpose {docref Record}内にnameのフィールドが存在するかをチェックします。}
    {parameter r, {docref Record}}
    {parameter name, フィールド名}
  }
  {define-proc public inline {key-exists? r:Record, name:String}:bool
    {return 
        {if-non-null rs = r.record-set then
            def (f, found?) = {rs.fields.get-if-exists name}
            found?
         else
            false
        }
    }
  }
}
