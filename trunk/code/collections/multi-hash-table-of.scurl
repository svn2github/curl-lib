||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @authors Izumi Kashiwagi
|||


{doc-next
    {purpose
        重複したキーを保持できる {docref HashTable-of} です。
    }
}
{define-class public {MultiHashTable-of tk:Type, te:Type}

  {doc-next
    {purpose
        キー：値 = 1 : n の {docref HashTable-of}
    }
  }
  field private constant _key-hash:{HashTable-of tk, {Array-of te}}

  {doc-next
    {purpose
        コレクションの要素数
    }
  }
  field private _size:int
  
  {doc-next
    {purpose
        MultiHashTable-of を初期化します。
    }
  }
  {constructor public {default ...:any}
    set self._key-hash = {{HashTable-of tk, {Array-of te}}}
    let k:tk = {uninitialized-value-for-type tk}
    let v:te = {uninitialized-value-for-type te}
    {with-compiler-directives allow-implicit-any-casts? = true do
        {for (val, key:#String) key index:int in ... do
            {if {bit-and index, 1} == 0 then
                {if val isa tk then
                    set k = val
                 else
                    {throw
                        {SyntaxError
                            {format "%s から %s にキャストすることはできません。", {type-of val}, tk},
                            null, 0, 0
                        }
                    }
                }
             else
                {if val isa te then
                    set v = val
                 else
                    {throw
                        {SyntaxError
                            {format "%s から %s にキャストすることはできません。", {type-of val}, te},
                            null, 0, 0
                        }
                    }
                }
                {self.set k, v}
            }
        }
    }
  }

  {doc-next
    {purpose
        要素のデータ型を返します。
    }
    {return-vals
        self 内の要素の {docref Type}。データ型は、プリミティブ データ型またはクラス データ型になります。
    }
  }
  {getter public {element-type}:Type
    {return te}
  }
  
  {doc-next
    {purpose
        コレクションが空かどうかを調べます。
    }
    {return-vals
        bool 値。self に要素がない場合、true を返します。それ以外の場合は、false を返します。
    }
  }
  {getter public {empty?}:bool
    {return self._key-hash.size == 0}
  }

  {doc-next
    {purpose
        キーのデータ型を返します。
    }
    {return-vals 有効なデータ型。}
  }
  {getter public {key-type}:Type
    {return tk}
  }
  
  {doc-next
    {purpose
        コレクションの要素数を返します。
    }
    {return-vals 要素数を示すint。}
  }
  {getter public {size}:int
    {return self._size}
  }
  
  {doc-next
    {purpose
        要素の値を設定します。 
    }   
    {parameter key, キー}
    {parameter val, 値}
  }
  {method public {set key:tk, val:te}:void
    def (k:tk, found?:bool) = {self._key-hash.get-key-if-exists key}
    {if found? then
        def val-array = self._key-hash[k]
        {val-array.append val}
     else
        {self._key-hash.set key, {{Array-of te} val}}
    }
    {inc self._size}
  }
  
  {doc-next
    {purpose
        要素の配列を取得します。
    }
    {parameter key, キー}
    {return-vals キーに一致する要素の配列}
  }
  {method public {get key:tk}:{Array-of te}
    {return self._key-hash[key]}
  }

  {doc-next
    {purpose
        key でインデックス付けされた要素と、示された要素が見つかったかどうかを示します。
    }
    {parameter key, キー}
    {return-vals
        このメソッドは次の2つの値を返します。
        {itemize
            {item 最初に返される値は、key でインデックス付けされた要素の配列です。}
            {item 2 番目に返される値は、特定の key を持つオブジェクトが self 内に存在するかどうかを示すブール値です。}
        }
    }
  }
  {method public {get-if-exists key:tk}:(value:{Array-of te}, found?:bool)
    {return
        {self._key-hash.get-if-exists key}
    }
  }

  {doc-next
    {purpose
        特定のキーを返します。
    }
    {parameter key, キー}
    {return-vals キー。戻り値は、self のキーと同じデータ型を持ちます。}
  }
  {method public {get-key key:tk}:tk
    {return
        {self._key-hash.get-key key}
    }
  }

  {doc-next
    {purpose
        特定のキーと、示された要素が見つかったかどうかを示すブール値を返します。
    }
    {parameter key, キー}
    {return-vals
        指定されたキーに等しいコンテナが使用しているキー。戻り値は、self のキーと同じデータ型を持ちます。
        また、キーが見つかったかどうかを示すフラグを返します。
    }
  }
  {method public {get-key-if-exists key:tk}:(key:tk, found?:bool)
    {return
        {self._key-hash.get-key-if-exists key}
    }
  }

  {doc-next
    {purpose
        キーが存在するかどうかを調べます。
    }
    {parameter key, キー}
    {return-vals
        bool 値。値が self のキーである場合、このメソッドは true を返します。
        それ以外の場合は、false を返します。
    }
  }
  {method public {key-exists? key:tk}:bool
    {return
        {self._key-hash.key-exists? key}
    }
  }

  {doc-next
    {purpose
        コレクションの各キーを含む Iterator-of を返します。
    }
    {return-vals
        self の要素と同じパラメータ化データ型を持つ {docref Iterator-of}。
        つまり、self が {docref Association-of int, {docref String}} の場合、
        このメソッドは {docref Iterator-of int} を返します。
    }
  }
  {method public {keys-to-Iterator}:{Iterator-of tk}
    {return
        {self._key-hash.keys-to-Iterator}
    }
  }
  
  {doc-next
    {purpose
        すべての要素を削除します。
    }
  }
  {method public {clear}:void
    {self._key-hash.clear}
    set self._size = 0
  }

  {doc-next
    {purpose
        要素を削除します。
    }
    {parameter key,
        削除する要素のキーの値。この値は、self のキーと同じデータ型を持つ必要があります。
    }
    {parameter error-if-missing?,
        ユーザーが存在しない要素を削除しようとしたときに
        このメソッドがエラーを生成するかどうかを示すブール値のフラグ。
    }
  }
  {method public {remove key:tk, error-if-missing?:bool = true}:void
    def (k:tk, found?:bool) = {self._key-hash.get-key-if-exists key}
    {if found? then
        def val-array = self._key-hash[key]
        set self._size = self._size - val-array.size
        {self._key-hash.remove key}
     else
        {throw
            {KeyNotFoundException key = key, {format "キー '%s' が見つかりません。", key}}
        }
    }
  }
}

|| alias (shorthand for something)
{doc-next
    {purpose
        {curl-code
            {MultiHashTable-of any, any}の略記法
        }
    }
}
{def public MultiHashTable:ParameterizedType = {MultiHashTable-of any, any}}
