||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @authors Hitoshi Okada, Izumi Kashiwagi
||| (Comments from Curl,inc)
|||

{doc-next
    {purpose FastArray、Arrayのユーティリティ}
}
{define-class public open ArrayUtil

  {doc-next
    {purpose {docref Array-of} 又は {docref FastArray-of} の要素を出力します。}
    {parameter array,
        出力したい配列。{docref Array-of} 又は
        {docref FastArray-of} でない場合は、要素は出力されません。
    }
  }
  {define-proc public inline {output array:any}:void
    {output
        {if {ArrayUtil.isa-Array? array} then
            array.underlying-FastArray
         else
            array
        }
    }
  }

  {doc-next
    {purpose {docref FastArray-of} か否かを判定します。}
    {parameter v, 判定する対象。}
    {parameter parameter-type, 判定対象のパラメータの型。}
    {return-vals
        {docref FastArray-of} の場合は、true を返します。
    }
  }
  {define-proc public inline {isa-FastArray?
                                 v:any,
                                 parameter-type:#Type = null
                             }:bool
    {return
        {type-switch {type-of v}
         case type:ClassType do
            {{this-class}.subtype-of-FastArray? type}
         else
            false
        }
    }
  }

  {doc-next
    {purpose {docref Array-of} か否かを判定します。}
    {parameter v, 判定する対象。}
    {parameter parameter-type, 判定対象のパラメータの型。}
    {return-vals
        {docref Array-of} の場合は、true を返します。
    }
  }
  {define-proc public inline {isa-Array?
                                 v:any,
                                 parameter-type:#Type = null
                             }:bool
    {return
        {type-switch {type-of v}
         case type:ClassType do
            {{this-class}.subtype-of-Array? type}
         else
            false
        }
    }
  }
  
  {doc-next
    {purpose すべての要素を配列内に含むか否かを判定します。}
    {parameter array, 要素が含まれているかどうか判定する対象の配列。}
    {parameter ..., 要素をカンマ区切りで指定します。}
    {return-vals ... で指定した要素すべてを含む場合は、true を返します。}
  }
  {define-proc public inline {contains?
                                 array:any,
                                 ...:any
                             }:bool
    || TODO: キーワード引数追加 （すべてでなくどれか1つのみ含めばOKという場合）
    {if {Arguments ...}.size == 0 then
        {error "１つ以上の引数要素が必要です。"}
    }
    {ArrayUtil.check-array array}
    {for v in ... do
        {if {array.find v} == -1 then
            {return false}
        }
    }
    {return true}
  }

  {doc-next
    {purpose 配列の最大値を取得します。}
    {parameter array, 対象となる配列。}
    {return-vals 最大値を返します。}
    {notes {docref Primitive}、{docref String}、{docref DateTime} 型のみに対応しています。}
  }
  {define-proc public inline {max array:any}:any || TODO: get-max
    {ArrayUtil.check-array array}
    def v = {array.clone}
    def t = array.element-type
    {if t == DateTime then
        {v.sort
            comparison-proc =
                {proc {t1:DateTime, t2:DateTime}:bool
                    {return {t1.compare t2} == -1}
                }
        }
     elseif t.primitive? or t == String then
        {v.sort}
     else
        {error {format "%sは、パラメータの型が不正です。", {type-of array}}}
    }
    {return v[array.size - 1]}
  }

  {doc-next
    {purpose 配列の最小値を取得します。}
    {parameter array, 対象となる配列。}
    {return-vals 最小値を返します。}
    {notes {docref Primitive}、{docref String}、{docref DateTime} 型のみに対応しています。}
  }
  {define-proc public inline {min array:any}:any
    {ArrayUtil.check-array array}
    def v = {array.clone}
    def t = array.element-type
    {if t == DateTime then
        {v.sort
            comparison-proc =
                {proc {t1:DateTime, t2:DateTime}:bool
                    {return {t1.compare t2} == -1}
                }
        }
     elseif t.primitive? or t == String then
        {v.sort}
     else
        {error {format "%sは、パラメータの型が不正です。", {type-of array}}}
    }
    {return v[0]}
  }

  {doc-next
    {purpose 配列の合計値を取得します。}
    {parameter array, 対象となる配列。}
    {return-vals 合計値を返します。}
    {notes 数値にのみに対応しています。}
  }
  {define-proc public inline {sum array:any}:any
    {ArrayUtil.check-array array}
    {switch array.element-type
     case int, int8, int16, int32, int64, uint32, uint64, double, float do
        let r = 0 asa array.element-type
        {for v in array do
            set r = r + v
        }
        {return r}
     else
        {error {format "%sは、パラメータの型が数値型ではありません。", {type-of array}}}
    }
  }
  
  {doc-next
    {purpose 配列の平均値を取得します。}
    {parameter array, 対象となる配列。}
    {return-vals 平均値を返します。}
    {notes 数値にのみに対応しています。}
  }
  {define-proc public inline {avg array:any}:any
    def sum = {ArrayUtil.sum array}
    {return sum / array.size}
  }

  {doc-next
    {purpose 正規表現に一致する要素のみになるようフィルタリングします。}
    {parameter array, フィルタリングする配列。}
    {parameter regexp, 正規表現。}
    {notes 文字列にのみ対応しています。}
  }
  {define-proc public inline {grep
                                 array:StringArray,
                                 regexp:StringInterface
                             }:void
    {ArrayUtil.check-array array}
    {array.filter
        {proc {str:String}:bool
            {return {regexp-match? regexp, str}}
        }
    }
  }

  {doc-next
    {purpose 正規表現に一致する要素のみのコレクションのクローンを返します。}
    {parameter array, フィルタリングする配列。}
    {parameter regexp, 正規表現。}
    {return-vals 要素がフィルタリングされたコレクションのクローンが返されます。}
    {notes 文字列にのみ対応しています。}
  }
  {define-proc public inline {grep-clone
                                 array:StringArray,
                                 regexp:StringInterface
                             }:StringArray
    {ArrayUtil.check-array array}
    {return
        {array.filter-clone
            {proc {str:String}:bool
                {return {regexp-match? regexp, str}}
            }
        }
    }
  }

  {doc-next
    {purpose 指定した文字で始まる要素のみになるようフィルタリングします。}
    {parameter array, フィルタリングする配列。}
    {parameter prefix-str, 指定する文字列。}
    {parameter ignore-case?,
        大文字と小文字の区別を無視するかどうかを示すキーワード引数。既定では大文字と小文字は区別されます。
    }
    {notes 文字列にのみ対応しています。}
  }
  {define-proc public inline {filter-by-prefix
                                 array:StringArray,
                                 prefix-str:StringInterface,
                                 ignore-case?:bool = false
                             }:void
    {ArrayUtil.check-array array}
    {array.filter
        {proc {str:String}:bool
            {return {str.prefix? prefix-str, ignore-case? = ignore-case?}}
        }
    }
  }

  {doc-next
    {purpose 指定した文字で始まる要素のみのコレクションのクローンを返します。}
    {parameter array, フィルタリングする配列。}
    {parameter prefix-str, 指定する文字列。}
    {parameter ignore-case?,
        大文字と小文字の区別を無視するかどうかを示すキーワード引数。既定では大文字と小文字は区別されます。
    }
    {return-vals 要素がフィルタリングされたコレクションのクローンが返されます。}
    {notes 文字列にのみ対応しています。}
  }
  {define-proc public inline {filter-by-prefix-clone
                                 array:StringArray,
                                 prefix-str:StringInterface,
                                 ignore-case?:bool = false
                             }:StringArray
    {ArrayUtil.check-array array}
    {return 
        {array.filter-clone
            {proc {str:String}:bool
                {return {str.prefix? prefix-str, ignore-case? = ignore-case?}}
            }
        }
    }
  }

  {doc-next
    {purpose 指定した文字で終わる要素のみになるようフィルタリングします。}
    {parameter array, フィルタリングする配列。}
    {parameter suffix-str, 指定する文字列。}
    {parameter ignore-case?,
        大文字と小文字の区別を無視するかどうかを示すキーワード引数。既定では大文字と小文字は区別されます。
    }
    {notes 文字列にのみ対応しています。}
  }
  {define-proc public inline {filter-by-suffix
                                 array:StringArray,
                                 suffix-str:StringInterface,
                                 ignore-case?:bool = false
                             }:void
    {ArrayUtil.check-array array}
    {array.filter
        {proc {str:String}:bool
            {return {str.suffix? suffix-str, ignore-case? = ignore-case?}}
        }
    }
  }

  {doc-next
    {purpose 指定した文字で終わる要素のみのコレクションのクローンを返します。}
    {parameter array, フィルタリングする配列。}
    {parameter prefix-str, 指定する文字列。}
    {parameter ignore-case?,
        大文字と小文字の区別を無視するかどうかを示すキーワード引数。既定では大文字と小文字は区別されます。
    }
    {return-vals 要素がフィルタリングされたコレクションのクローンが返されます。}
    {notes 文字列にのみ対応しています。}
  }
  {define-proc public inline {filter-by-suffix-clone
                                 array:StringArray,
                                 suffix-str:StringInterface,
                                 ignore-case?:bool = false
                             }:StringArray
    def v = {array.clone}
    {ArrayUtil.filter-by-suffix v, suffix-str, ignore-case? = ignore-case?}
    {return v}
  }

  {doc-next
    {purpose 重複を排除し、引数で指定された配列をグルーピングします。}
    {parameter array, グルーピングする配列。}
  }
  {define-proc public inline {unique array:any}:void
    {ArrayUtil.check-array array}
    {array.sort}
    def len = array.size
    let previous = array[len - 1]
    {for i = len - 2 downto 0 do
        def current = array[i]
        {if previous == current then
            {array.remove i}
         else
            set previous = current
        }
    }
  }

  {doc-next
    {purpose 重複を排除し、グルーピングされたコレクションのクローンを返します。}
    {parameter array, グルーピングする配列。}
    {return-vals 要素がグルーピングされたコレクションのクローンが返されます。}
  }
  {define-proc public inline {unique-clone array:any}:any
    def v = {array.clone}
    {ArrayUtil.unique v}
    {return v}
  }

  {doc-next
    {purpose 一致する要素が存在しない場合のみ追加します。}
    {parameter array, 対象の配列。}
    {parameter value, 追加する要素。}
  }
  {define-proc public {append-if-not-exists
                          array:any,
                          value:any
                      }:void
    {ArrayUtil.check-array array}
    {if {array.find value} == -1 then
        {array.append value}
    }
  }
  
  {doc-next
    {purpose equality-proc に一致する要素が１つ以上存在すれば追加します。}
    {parameter array, 対象の配列。}
    {parameter value, 追加する要素。}
    {parameter equality-proc, 要素を比較するプロシージャ。}
  }
  {define-proc public {append-if-equals
                          array:any,
                          value:any,
                          equality-proc:{proc-type {value:any}:bool}
                      }:void
    {ArrayUtil.check-array array}
    def v = {array.filter-clone equality-proc}
    {if v.size > 0 then
        {array.append value}
    }
  }
  
  {doc-next
    {purpose equality-proc に一致する要素を update-proc に従って変更します。}
    {parameter array, 対象の配列。}
    {parameter update-proc, 要素を更新するプロシージャ。}
    {parameter equality-proc, 要素を比較するプロシージャ。}
  }
  {define-proc public {update-if-equals
                          array:any,
                          update-proc:{proc-type {value:any}:any},
                          equality-proc:#{proc-type {value:any}:bool} = null
                      }:void
    {ArrayUtil.check-array array}
    {for v key i in array do
        {if equality-proc == null or {equality-proc v} then
            set array[i] = {update-proc v}
        }
    }
  }

  {doc-next
    {purpose equality-proc に一致する要素をすべて削除します。}
    {parameter array, 対象の配列。}
    {parameter equality-proc, 要素を比較するプロシージャ。}
  }
  {define-proc public {remove-if-equals
                          array:any,
                          equality-proc:{proc-type {value:any}:bool}
                      }:void
    || NOTE: similar to Array-of.filter.
    {ArrayUtil.check-array array}
    {for i:int = array.size - 1 downto 0 do
        def v = array[i]
        {if {equality-proc v} then
            {array.remove i}
        }
    }
  }

  {doc-next
    {purpose equality-proc に一致する要素数を返します。}
    {parameter array, 対象の配列。}
    {parameter equality-proc, 要素を比較するプロシージャ。}
    {return-vals equality-proc に一致する要素数。}
  }
  {define-proc public {count-elements 
                          array:any,
                          equality-proc:{proc-type {value:any}:bool}
                      }:int
    {ArrayUtil.check-array array}
    let count:int = 0
    {for v in array do
        {if {equality-proc v} then
            {inc count}
        }
    }
    {return count}
  }

  {doc-next
    {purpose 配列同士の和集合を返します。ただし、重複を許可しません。}
    {parameter array1, 和集合の対象となる配列。}
    {parameter array2, 和集合の対象となる配列。}
    {return-vals 和集合の結果を格納した配列を返します。}
  }
  {define-proc public {union array1:any, array2:any}:any
    {ArrayUtil.check-array array1}
    {ArrayUtil.check-array array2}
    {if array1.element-type != array2.element-type then
        {throw {IllegalArgumentException "配列の型が異なります。"}}
    }
    def array3 = {array1.clone}
    {for val in array2 do
        {if {array3.find val} == -1 then
            {array3.append val}
        }
    }
    {return array3}
  }

  {doc-next
    {purpose 配列同士の和集合を返します。ただし、重複を許可します。}
    {parameter array1, 和集合の対象となる配列。}
    {parameter array2, 和集合の対象となる配列。}
    {return-vals 和集合の結果を格納した配列を返します。}
  }
  {define-proc public {union-all array1:any, array2:any}:any
    {ArrayUtil.check-array array1}
    {ArrayUtil.check-array array2}
    {if array1.element-type != array2.element-type then
        {throw {IllegalArgumentException "配列の型が異なります。"}}
    }
    def array3 = {array1.clone}
    {array3.concat array2}
    {return array3}
  }
  
  {doc-next
    {purpose 配列同士の積集合を返します。}
    {parameter array1, 積集合の対象となる配列。}
    {parameter array2, 積集合の対象となる配列。}
    {return-vals 積集合の結果を格納した配列を返します。}
  }
  {define-proc public {intersect array1:any, array2:any}:any
    {ArrayUtil.check-array array1}
    {ArrayUtil.check-array array2}
    {if array1.element-type != array2.element-type then
        {throw {IllegalArgumentException "配列の型が異なります。"}}
    }
    def array3 = {array1.clone}
    {for i:int = array3.size - 1 downto 0 do
        def v = array3[i]
        {if {array2.find v} == -1 then
            {array3.remove i}
        }
    }
    {return array3}
  }

  {doc-next
    {purpose 配列同士の差集合を返します。}
    {parameter array1, 差集合の対象となる配列。}
    {parameter array2, 差集合の対象となる配列。}
    {return-vals array1 から array2 の要素を引いた差集合の結果を格納した配列を返します。}
  }
  {define-proc public {minus array1:any, array2:any}:any
    {ArrayUtil.check-array array1}
    {ArrayUtil.check-array array2}
    {if array1.element-type != array2.element-type then
        {throw {IllegalArgumentException "配列の型が異なります。"}}
    }
    def array3 = {array1.clone}
    {for i:int = array3.size - 1 downto 0 do
        def v = array3[i]
        {if {array2.find v} != -1 then
            {array3.remove i}
        }
    }
    {return array3}
  }

  {doc-next
    {purpose 配列を指定した区切り文字に従い、結合します。}
    {parameter array, 配列}
    {parameter delim, 区切り文字}
    {return-vals 結合した文字列を返します。}
  }
  {define-proc public {join array:any, delim:String = ","}:String
    def buf = {StringBuf}
    {for v key i in array do
        {if i != 0 then
            {buf.concat delim}
        }
        || NOTE: The following code is faster than '& ""'.
        {buf.concat {format "%s", v}}
        ||{buf.concat v & ""}
    }
    {return {buf.to-String}}
  }
  
  {doc-next
    {purpose 要素をランダムに抽出します。}
    {parameter array, 対象の配列。}
    {return-vals, ランダムに抽出された要素を返します。}
  }
  {define-proc public {choice-at-random array:any}:any
    {ArrayUtil.check-array array}
    {return array[{{Random}.next-in-range 0, array.size - 1}]}
  }

  {doc-next
    {purpose キャスト元の配列の要素を、キャスト先の配列の要素の型にキャストして格納します。}
    {parameter src, キャスト元の配列。}
    {parameter dst, キャスト先の配列。}
  }
  {define-proc public inline {copy-Array
                                 src:{Array-of any},
                                 dst:any ||{Array-of t}
                             }:void
    {ArrayUtil.check-array src}
    def parameterized-type = dst.element-type 
    {for v in src do
        {dst.append v asa parameterized-type}
    }
  }

  
  {doc-next
    {purpose
        {docref Array-of} 又は {docref FastArray-of} であることを確認します。
        どちらでもない場合には、例外がスローされます。
    }
    {parameter v, 対象の配列。}
    {notes 内部使用限定です。}
  }
  {define-proc private {check-array v:any}:void
    {if not ({ArrayUtil.isa-Array? v} or {ArrayUtil.isa-FastArray? v}) then
        {error "Array-ofもしくはFastArray-ofではありません。"}
    }
  }
  
  {define-proc private {subtype-of-FastArray? type:ClassType}:bool
    {if type.template == FastArray-of then
        {return true}
    }
    {for base in type.direct-superclasses do
        {if {{this-class}.subtype-of-FastArray? base} then
            {return true}
        }
    }
    {return false}
  }

  {define-proc private {subtype-of-Array? type:ClassType}:bool
    {if type.template == Array-of then
        {return true}
    }
    {for base in type.direct-superclasses do
        {if {{this-class}.subtype-of-Array? base} then
            {return true}
        }
    }
    {return false}
  }
  
  {doc-next
    {purpose {docref ParameterizedType} か否かを判定します。}
    {parameter v, 判定する対象。}
    {parameter parameter-type, 判定対象のパラメータの型。}
    {return-vals {docref ParameterizedType} の場合、true を返します。}
  }
  {define-proc private {is-ParameterizedType?
                           v:any,
                           parameter-type:#Type = null
                       }:bool
    def t = {type-of v}
    {if not t.parameterized-class? then
        {return false}
    }
    {if-non-null at = parameter-type then
        {if t.positional-type-parameters[0].parameter != at then
            {return false}
        }
    }
    {return true}
  }
}
