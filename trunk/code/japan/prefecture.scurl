||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @authors Hitoshi Okada
|||

|| TODO: 要パフォーマンスチューニング
{doc-next
    {purpose 日本の地域。（北海道、東北、関東、中部、近畿、中国、四国、九州）}
}
{define-class public final JapaneseArea

  {doc-next {purpose 地域名}}
  field public-get name:String
  
  {doc-next {purpose 地域に含まれる都道府県一覧}}
  field public-get prefectures:{Array-of JapanesePrefecture}
  
  {constructor public {default
                          name:String,
                          ...:JapanesePrefecture
                      }
    set self.name = name
    set self.prefectures = {{Array-of JapanesePrefecture}}
    {for v in {splice ...} do
        {self.prefectures.append v}
    }
  }

  || @Override
  {method public {object-describe
                     out:TextOutputStream,
                     locale:Locale
                 }:void
    {out.write-one-string self.name}
  }
}

{doc-next
    {purpose 日本の47都道府県。codeはJIS　X0401に準拠しています。}
    {parameter code, JIS X0401に準拠したコード}
    {parameter name, 都道府県名}
    {parameter capital-city, 県庁所在地}
}
{define-class public final JapanesePrefecture
  
  {doc-next {purpose 都道府県コード}}
  field public-get code:String || JIS X0401 code

  {doc-next {purpose 都道府県名}}
  field public-get name:String
  
  {doc-next {purpose 県庁所在地名}}
  field public-get capital-city:String

  {doc-next {purpose 都道府県中、都か否かを確認}}
  {getter public {is-to?}:bool
    {return {self.name.suffix? "都"}}
  }
  {doc-next {purpose 都道府県中、道か否かを確認}}
  {getter public {is-dou?}:bool
    {return {self.name.suffix? "道"}}
  }
  {doc-next {purpose 都道府県中、府か否かを確認}}
  {getter public {is-fu?}:bool
    {return {self.name.suffix? "府"}}
  }
  {doc-next {purpose 都道府県中、県か否かを確認}}
  {getter public {is-ken?}:bool
    {return {self.name.suffix? "県"}}
  }
  
  {constructor public {default
                          code:String,
                          name:String,
                          capital-city:String
                      }
    set self.code = code
    set self.name = name
    set self.capital-city = capital-city
  }

  || @Override
  {method public {object-describe
                     out:TextOutputStream,
                     locale:Locale
                 }:void
    {out.write-one-string {format "%s %s", self.code, self.name}}
  }
}

|| 都道府県
{def package prefectures = 
    {{Array-of JapaneseArea}
        {JapaneseArea "北海道",
            {JapanesePrefecture "01", "北海道", "札幌市"}
        },
        {JapaneseArea "東北",
            {JapanesePrefecture "02", "青森県", "青森市"},
            {JapanesePrefecture "03", "岩手県", "盛岡市"},
            {JapanesePrefecture "04", "宮城県", "仙台市"},
            {JapanesePrefecture "05", "秋田県", "秋田市"},
            {JapanesePrefecture "06", "山形県", "山形市"},
            {JapanesePrefecture "07", "福島県", "福島市"}
        },
        {JapaneseArea "関東",
            {JapanesePrefecture "08", "茨城県", "水戸市"},
            {JapanesePrefecture "09", "栃木県", "宇都宮市"},
            {JapanesePrefecture "10", "群馬県", "前橋市"},
            {JapanesePrefecture "11", "埼玉県", "さいたま市"},
            {JapanesePrefecture "12", "千葉県", "千葉市"},
            {JapanesePrefecture "13", "東京都", "新宿区"},
            {JapanesePrefecture "14", "神奈川県", "横浜市"}
        },
        {JapaneseArea "中部",
            {JapanesePrefecture "15", "新潟県", "新潟市"},
            {JapanesePrefecture "16", "富山県", "富山市"},
            {JapanesePrefecture "17", "石川県", "金沢市"},
            {JapanesePrefecture "18", "福井県", "福井市"},
            {JapanesePrefecture "19", "山梨県", "甲府市"},
            {JapanesePrefecture "20", "長野県", "長野市"},
            {JapanesePrefecture "21", "岐阜県", "岐阜市"},
            {JapanesePrefecture "22", "静岡県", "静岡市"},
            {JapanesePrefecture "23", "愛知県", "名古屋市"},
            {JapanesePrefecture "24", "三重県", "津市"}
        },
        {JapaneseArea "近畿",
            {JapanesePrefecture "25", "滋賀県", "大津市"},
            {JapanesePrefecture "26", "京都府", "京都府"},
            {JapanesePrefecture "27", "大阪府", "大阪市"},
            {JapanesePrefecture "28", "兵庫県", "神戸市"},
            {JapanesePrefecture "29", "奈良県", "奈良市"},
            {JapanesePrefecture "30", "和歌山県", "和歌山市"}
        },
        {JapaneseArea "中国",
            {JapanesePrefecture "31", "鳥取県", "鳥取市"},
            {JapanesePrefecture "32", "島根県", "松江市"},
            {JapanesePrefecture "33", "岡山県", "岡山市"},
            {JapanesePrefecture "34", "広島県", "広島市"},
            {JapanesePrefecture "35", "山口県", "山口市"}
        },
        {JapaneseArea "四国",
            {JapanesePrefecture "36", "徳島県", "徳島市"},
            {JapanesePrefecture "37", "香川県", "高松市"},
            {JapanesePrefecture "38", "愛媛県", "松山市"},
            {JapanesePrefecture "39", "高知県", "高知市"}
        },
        {JapaneseArea "九州",
            {JapanesePrefecture "40", "福岡県", "福岡市"},
            {JapanesePrefecture "41", "佐賀県", "佐賀市"},
            {JapanesePrefecture "42", "長崎県", "長崎市"},
            {JapanesePrefecture "43", "熊本県", "熊本市"},
            {JapanesePrefecture "44", "大分県", "大分市"},
            {JapanesePrefecture "45", "宮崎県", "宮崎市"},
            {JapanesePrefecture "46", "鹿児島県", "鹿児島市"},
            {JapanesePrefecture "47", "沖縄県", "那覇市"}
        }
    }
}

||
|| 都道府県プロシージャ
||
{doc-next
    {purpose 日本のすべての地域（北海道、東北、関東、中部、近畿、中国、四国、九州）を取得します。}
}
{define-proc public {get-all-japanese-areas}:{Array-of JapaneseArea}
    {return prefectures}
}

{doc-next
    {purpose 日本のすべての地域（北海道、東北、関東、中部、近畿、中国、四国、九州）の名前を取得します。}
}
{define-proc public {get-all-japanese-area-names}:StringArray
    def result = {StringArray}
    {for v in prefectures do
        {result.append v.name}
    }
    {return result}
}

{doc-next
    {purpose 日本のすべての都道府県を取得します。}
}
{define-proc public {get-all-japanese-prefectures
                    }:{Array-of JapanesePrefecture}
    def result = {{Array-of JapanesePrefecture}}
    {for area in {get-all-japanese-areas} do
        {for v in area.prefectures do
            {result.append v}
        }
    }
    {return result}
}

{doc-next
    {purpose 日本のすべての都道府県名を取得します。}
}
{define-proc public {get-all-japanese-prefecture-names}:StringArray
    def result = {StringArray}
    {for v in {get-all-japanese-prefectures} do
        {result.append v.name}
    }
    {return result}
}

{doc-next
    {purpose
        日本の地域名（北海道、東北、関東、中部、近畿、中国、四国、九州）から、その地域の都道府県を取得します。
    }
    {parameter area-name, 地域名}
    {return-vals 都道府県名一覧}
}
{define-proc public {get-japanese-prefectures-from-area
                        area-name:String
                    }:{Array-of JapanesePrefecture}
    {for v in {get-all-japanese-areas} do
        {if v.name == area-name then
            {return v.prefectures}
        }
    }
    {error {format "%sは存在しません。", area-name}}
}

{doc-next
    {purpose 日本の都道府県名から地域（北海道、東北、関東、中部、近畿、中国、四国、九州）を取得します。}
    {parameter prefecture-name, 都道府県名}
    {return-vals 地域名}
}
{define-proc public inline {get-japanese-area-from-prefecture
                               prefecture-name:String
                           }:#JapaneseArea
    {for area in {get-all-japanese-areas} do
        {for v in area.prefectures do
            {if v.name == prefecture-name then
                {return area}
            }
        }
    }
    {return null}
}

{doc-next
    {purpose 日本の都道府県コードから都道府県を取得します。}
    {parameter prefecture-code, 都道府県コード}
    {return-vals 都道府県名}
}
{define-proc public inline {get-japanese-prefecture-from-prefecture-code
                               prefecture-code:String
                           }:#JapanesePrefecture
    {for area in {get-all-japanese-areas} do
        {for v in area.prefectures do
            {if v.code == prefecture-code then
                {return v}
            }
        }
    }
    {return null}
}

{doc-next
    {purpose 日本の都道府県コードから都道府県名を取得します。}
    {parameter prefecture-code, 都道府県コード}
    {return-vals 都道府県名}
}
{define-proc public inline {get-japanese-name-from-prefecture-code
                               prefecture-code:String
                           }:#String
    {return
        {if-non-null pref = {get-japanese-prefecture-from-prefecture-code prefecture-code} then
            pref.name
         else
            null
        }
    }
}
