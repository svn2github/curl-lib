||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @authors Hitoshi Okada, Yoshitaka Fukuta
|||

{import * from CURL.LANGUAGE.SOURCE}

{doc-next
    {purpose 環境により処理を分岐することができます。}
    {details
        例えば、環境がdevelopmentの場合、case developement doのボディ内の処理が実行されます。
        環境は、マニフェストのメタデータ「x-environment」にセットします。
        現在セットされている環境を参照したい場合は、{docref get-current-environment}を利用します。
        {curl-code
            {environment-switch
             case "development" do
                {output "dev"}
             case "test" do
                {output "test"}
             case "production" do
                {output "prod"}
             else
                || do nothing   
            }
        }
        また、load.scurl内でinclude文をスイッチすることもできます。
        {curl-code
            {environment-switch
             case "development" do
                {include "dev.scurl"}
             case "test" do
                {include "test.scurl"}
             case "production" do
                {include "prod.scurl"}
             else
                || do nothing   
            }
        }
    }
    || NOTE:開発用のスタブと本番用のコードを切り替えたり、Exceptionのハンドリングを切り替えることができます。
}
{define-macro public {environment-switch
                         ?clauses:{sequence
                                    case
                                    ?:{bounded-comma-sequence
                                          1, infinity,
                                          ?:{literal String}
||                                          ?:identifier
                                      }
                                    do
                                    ?:tokens
                                }
                         ?final:{optional else ?:tokens}
                     }

    def current = macro-env.manifest.meta-data["x-environment"] 
||    def current = {get-current-manifest}.meta-data["x-environment"]
    
    {for clause in clauses do
        {syntax-switch clause, must-match? = true
         case
            {pattern
                case ?environments:{comma-sequence ?:{literal String}}
||                case ?environments:{comma-sequence ?:identifier}
                do ?body:tokens
            }
         do
            {for environment in environments do
                {syntax-switch environment, must-match? = true
                 case {pattern ?str:{literal String}} do
||                 case {pattern ?str:identifier} do
                    let s:String = str.value asa String
                    {if current == s then
||                    {if str == {Identifier current} then
                        {return body}
                    }
                }
            }
        }
    }

    {syntax-switch final
     case {pattern else ?body:tokens} do
        {return body}
    }

    || Otherwise do nothing.
    {return {EmptySource}}
}

{doc-next
    {purpose 現在の環境を取得します。}
    {details
        マニフェストのメタデータ「x-environment」の値を返します。
        このプロシージャは、通常{docref environment-switch}マクロと併用して利用します。
    }
}
{define-proc public {get-current-environment}:String
    {return {get-current-manifest}.meta-data["x-environment"] asa String}
}


