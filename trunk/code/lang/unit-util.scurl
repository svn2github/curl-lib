{curl-file-attributes character-encoding = "utf8"}
||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @authors Izumi Kashiwagi, Hitoshi Okada, Yoshitaka Fukuta
|||

{doc-next {purpose {docref Distance} のユーティリティクラス}}
{define-class public open DistanceUtil

  {doc-next
    {purpose {docref Distance} を文字列に変換します。}
    {parameter val, 変換する {docref Distance}。}
    {parameter precision, 文字列に含める小数点以下の桁数。}
    {return-vals 変換した文字列。}
  }
  {define-proc public {to-String
                          val:Distance,
                          precision:int = 0
                      }:String
    || TODO
    {return {format "%.*f", precision, val}}
  }

  {doc-next
    {purpose 文字列を {docref Distance} 型に変換します。}
    {parameter s, 変換する文字列。}
    {return-vals 変換した {docref Distance} の値。}
  }
  {define-proc public {to-Distance s:String}:Distance
    {type-switch {parse-as-literal s}
     case d:Distance do
        {return d}
    }
    {error {lmessage '{value s}'はDistanceではありません。}}
  }

}

{doc-next {purpose {docref Time} のユーティリティクラス}}
{define-class public open TimeUtil

  {doc-next
    {purpose {docref Time} を文字列に変換します。}
    {parameter val, 変換する {docref Time}。}
    {parameter precision, 文字列に含める小数点以下の桁数。}
    {return-vals 変換した文字列。}
  }
  {define-proc public {to-String
                          val:Time,
                          precision:int = 0
                      }:String
    || TODO
    {return {format "%.*f", precision, val}}
  }

  {doc-next
    {purpose 文字列を {docref Time} 型に変換します。}
    {parameter s, 変換する文字列。}
    {return-vals 変換した {docref Time} の値。}
  }
  {define-proc public {to-Time s:String}:Time
    {type-switch {parse-as-literal s}
     case t:Time do
        {return t}
    }
    {error {lmessage '{value s}'はTimeではありません。}}
  }
  
  {doc-next
    {purpose HH:MM を {docref Time} に変換します。}
    {parameter str, HH:MM 形式の文字列}
    {return-vals {docref Time} 型の時間。}
  }
  {define-proc public {parse-hhmi s:String}:Time
    {if not {regexp-match? "\\d\{2\}:\\d\{2\}", s} then
        {throw {Exception "HH:MM 形式ではありません。"}}
    }
    {return {{s.substr 0, 2}.to-int} * 1h + {{s.substr 3, 2}.to-int} * 1min}
  }
  
  {doc-next
    {purpose {docref Time} を HH:MM に変換します。}
    {parameter t, 時間}
    {return-vals HH:MM 形式の文字列。}
  }
  {define-proc public {format-hhmi t:Time}:String
    {return {format "%02d:%02d", {TimeUtil.hour-as-int t}, {TimeUtil.minute-as-int t}}}
  }

  {doc-next
    {purpose {docref Time} から日数を int 型で取得します。}
    {parameter t, 時間}
    {return-vals 日数}
  }
  {define-proc public {day-as-int t:Time}:int
    {return {floor t, 24h} asa int}
  }
  
  {doc-next
    {purpose {docref Time} から時を int 型で取得します。}
    {parameter t, 時間}
    {return-vals 時}
  }
  {define-proc public {hour-as-int t:Time}:int
    {return {floor t, 1h} asa int}
  }

  {doc-next
    {purpose {docref Time} から分を int 型で取得します。}
    {parameter t, 時間}
    {return-vals 分}
  }
  {define-proc public {minute-as-int t:Time}:int
    {return ((t mod 1h) / 1min) asa int}
  }
}


{define-proc {parse-as-literal text:String}:(value:any, valid?:bool)
    set text = {text.trim-clone}
    def src = {CurlSource.from-string text}
    def (parsed, index) = {src.parse-token BOS}
    {if parsed == null or index != text.size then
        {return null, false}
    }
    {return {parsed.literal}}
}

|| TODO: 変換
||  px to pt / pt to px
