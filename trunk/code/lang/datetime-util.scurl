||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @authors Izumi Kashiwagi, Hitoshi Okada
|||

{doc-next {purpose 和暦の列挙型。}}
{define-enum public Wareki
    undefined,
    meiji   = "明治",
    taisyou = "大正",
    syouwa  = "昭和",
    heisei  = "平成"
}

{doc-next {purpose 西暦、和暦変換用のデータクラス。}}
{define-class public EraData
  
  {doc-next {purpose 和暦の元号}}
  field public-get private-set wareki:Wareki
  {doc-next {purpose 元号の開始年（西暦）}}
  field public-get private-set seireki-from:int
  {doc-next {purpose 元号の終了年（和暦）}}
  field public-get private-set wareki-end:int
  
  {constructor public {default
                          wareki:Wareki,
                          seireki-from:int,
                          wareki-end:int
                      }
    set self.wareki = wareki
    set self.seireki-from = seireki-from
    set self.wareki-end  =wareki-end
  }
}

{doc-next {purpose DateTimeのユーティリティクラス}}
{define-class public open DateTimeUtil

  let public constant ERA-DATA:{FastArray-of EraData} =
      {{FastArray-of EraData}
        {EraData Wareki.heisei, 1989, -1},
        {EraData Wareki.syouwa, 1926, 64},
        {EraData Wareki.taisyou, 1912, 15},
        {EraData Wareki.meiji, 1868, 45}
      }

  {doc-next
    {purpose 西暦から和暦に変換します。}
    {parameter year, 西暦}
    {return-vals
        次の 4 つの値を返します。
        {itemize
            {item 和暦の元号。}
            {item 年。}
            {item （暦をまたぐ場合）和暦の元号。該当するものがない場合は、Wareki.undefined を返します。}
            {item （暦をまたぐ場合）年。該当するものがない場合は、-1 を返します。}
        }
        
    }
  }
  {define-proc public {seireki-to-wareki year:int}:(wareki1:Wareki, nen1:int, wareki2:Wareki, nen2:int)
    {if year < DateTimeUtil.ERA-DATA[DateTimeUtil.ERA-DATA.size - 1].seireki-from then
        {throw {Exception "未対応の西暦です。"}}
    }
    {for i:int = 0 below DateTimeUtil.ERA-DATA.size do
        def data = DateTimeUtil.ERA-DATA[i]
        {if data.seireki-from < year then
            {return
                data.wareki, (year - (data.seireki-from - 1)), Wareki.undefined, -1
            }
         elseif data.seireki-from == year then
            {if i < DateTimeUtil.ERA-DATA.size - 1 then
                def before-data = DateTimeUtil.ERA-DATA[i + 1]
                {return
                    data.wareki, (year - (data.seireki-from - 1)),
                    before-data.wareki, (year - (before-data.seireki-from - 1))
                }
             else
                {return
                    data.wareki, (year - (data.seireki-from - 1)), Wareki.undefined, -1
                }
            }
        }
    }
    {return (Wareki.undefined, -1, Wareki.undefined, -1)}
  }

  {doc-next
    {purpose 和暦から西暦に変換します。}
    {parameter wareki, 和暦の元号}
    {parameter nen, 年}
    {return-vals 変換した西暦を返します。}
  }
  {define-proc public {wareki-to-seireki wareki:Wareki, nen:int}:int
    {for data:EraData in DateTimeUtil.ERA-DATA do
        {if wareki == data.wareki then
            {if data.wareki-end != -1 and nen > data.wareki-end then
                {throw {Exception "未対応の年です。"}}
            }
            {return nen + (data.seireki-from - 1)}
        }
    }
    {return -1}
  }

  {doc-next
    {purpose 閏年かどうかチェックします。}
    {parameter year, チェックしたい西暦}
    {return-vals 閏年の場合 trueを、平年の場合 false を返します。}
  }
  {define-proc public {is-uruu? year:int}:bool
    {return
        (year mod 4 == 0 and year mod 100 != 0) or year mod 400 == 0
    }
  }

  {doc-next
    {purpose 2つの{docref DateTime}が経過した日数を計算します。}
  }
  {define-proc public inline {elapsed-days dt1:DateTime, dt2:DateTime}:int
    {return {TimeUtil.day-as-int {dt1.elapsed ending = dt2}}}
  }

  {doc-next
    {purpose 2つの{docref DateTime}が経過した時間を計算します。}
  }
  {define-proc public inline {elapsed-hours dt1:DateTime, dt2:DateTime}:int
    {return {TimeUtil.hour-as-int {dt1.elapsed ending = dt2}}}
  }

  {doc-next
    {purpose {docref DateTime}の月末を取得します。}
  }
  {define-proc public inline {last-day-of-month dt:DateTime}:DateTime
    def last-day = {DateTime year = dt.info.year, month = dt.info.month + 1, day = 1}
    {DateTimeUtil.minus last-day, day = 1}
    {return last-day}
  }
  
  {doc-next
    {purpose {docref DateTime}から日本語の曜日を取得します。}
  }
  {define-proc public inline {japanese-day-of-week dt:DateTime}:String
    def days-of-week = {StringArray "月", "火", "水", "木", "金", "土", "日"}
    def day-of-week = dt.info.day-of-week
    {if not (day-of-week > 0 and day-of-week < 8) then
        {unreachable}
    }
    {return days-of-week[day-of-week - 1]}
  }

  {doc-next
    {purpose {docref DateTime}が営業日か否かをチェックします。}
    {notes 土・日のみをチェックするため、祝日は含まれません。}
  }
  {define-proc public inline {is-business-day?
                                 dt:DateTime||,
                                 ||holiday-proc:#{proc-type {DateTime}:bool} = null
                             }:bool
    || TODO: 祝日対応
    def day-of-week = dt.info.day-of-week
    {return (day-of-week > 0 and day-of-week < 6)}
  }

  {doc-next
    {purpose 指定した{docref DateTime}の月の第XX営業日（business-day）を計算します。}
    {notes 土・日のみをチェックするため、祝日は含まれません。}
  }
  {define-proc public inline {calculate-business-day
                                 dt:DateTime,
                                 business-day:int||,
                                 ||holiday-proc:#{proc-type {DateTime}:bool} = null
                             }:DateTime
    || TODO: 祝日対応
    def new-dt = {DateTime year = dt.info.year, month = dt.info.month, day = 1}
    let current-business-day:int = business-day
    {while true do
        {if {DateTimeUtil.is-business-day? new-dt} then
            {dec current-business-day}
            {if current-business-day == 0 then
                {break}
            }
        }
        {DateTimeUtil.add new-dt, day = 1}
    }
    {return new-dt}
  }

  {doc-next
    {purpose 今月の第XX営業日（business-day）を計算します。}
    {notes 土・日のみをチェックするため、祝日は含まれません。}
  }
  {define-proc public inline {calculate-business-day-in-this-month
                                 business-day:int||,
                                 ||holiday-proc:#{proc-type {DateTime}:bool} = null
                             }:DateTime
    || TODO: 祝日対応
    {return {DateTimeUtil.calculate-business-day {DateTime}, business-day}}
  }

  {doc-next
    {purpose 今月の第XX営業日（business-day）を計算します。}
    {notes 土・日のみをチェックするため、祝日は含まれません。}
  }
  {define-proc public inline {calculate-business-day-in-next-month
                                 business-day:int||,
                                 ||holiday-proc:#{proc-type {DateTime}:bool} = null
                             }:DateTime
    || TODO: 祝日対応
    def dt = {DateTime}
    {DateTimeUtil.add dt, month = 1}
    {return {DateTimeUtil.calculate-business-day dt, business-day}}
  }

  {doc-next
    {purpose {docref DateTime}に指定した年数や日数等を加算をします。}
  }
  {define-proc public inline {add
                                 dt:DateTime,
                                 year:int64 = 0,
                                 month:int = 0,
                                 day:int = 0,
                                 hour:int = 0,
                                 minute:int = 0,
                                 second:int = 0
                             }:void
    set dt.info = 
        {dt.info.modify-clone
            new-year = dt.info.year + year,
            new-month = dt.info.month + month,
            new-day = dt.info.day + day,
            new-hour = dt.info.hour + hour,
            new-minute = dt.info.minute + minute,
            new-second = dt.info.second + second
        }
  }

  {doc-next
    {purpose {docref DateTime}に指定した年数や日数等を減算をします。}
  }
  {define-proc public inline {minus
                                 dt:DateTime,
                                 year:int64 = 0,
                                 month:int = 0,
                                 day:int = 0,
                                 hour:int = 0,
                                 minute:int = 0,
                                 second:int = 0
                             }:void
    set dt.info = 
        {dt.info.modify-clone
            new-year = dt.info.year - year,
            new-month = dt.info.month - month,
            new-day = dt.info.day - day,
            new-hour = dt.info.hour - hour,
            new-minute = dt.info.minute - minute,
            new-second = dt.info.second - second
        }
  }

  {doc-next
    {purpose {docref DateTime}の値を修正します。}
  }
  {define-proc public inline {modify
                                 dt:DateTime,
                                 year:int64 = -1,
                                 month:int = -1,
                                 day:int = -1,
                                 hour:int = -1,
                                 minute:int = -1,
                                 second:int = -1
                             }:void
    set dt.info = 
        {dt.info.modify-clone
            new-year = {if year == -1 then dt.info.year else year},
            new-month = {if month == -1 then dt.info.month else month},
            new-day = {if day == -1 then dt.info.day else day},
            new-hour = {if hour == -1 then dt.info.hour else hour},
            new-minute = {if minute == -1 then dt.info.minute else minute},
            new-second = {if second == -1 then dt.info.second else second}
        }
  }
}
