||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @authors Izumi Kashiwagi, Hitoshi Okada, D.TIAN
||| (Comments from William Bardwell) 
|||

{import * from CURL.LANGUAGE.REGEXP}

{doc-next {purpose Stringのユーティリティです。}}
{define-class public open StringUtil
  
  {doc-next {purpose プラットフォーム別の改行コード}}
  def public NEW-LINE-CODE =
      {platform-switch
       case "win32" do
        "\r\n"
       case "unix", "mac" do
        "\n" 
       else
        {error "Unknown platform!"}
      }
  
  def private half-katakana =
      {{FastArray-of char}
        '!', '\"', '#', '$', '%', '&', '\'', '(', ')', '=', '~', '\|', '`',
        '\{', '+', '*', '\}', '<', '>', '?', '_', '-', '^', '\\', '@', '｢',
        ';', ':', '｣', '､', '｡', '･', '\\',
        'ｦ', 'ｧ', 'ｨ', 'ｩ', 'ｪ', 'ｫ', 'ｬ', 'ｭ', 'ｮ', 'ｯ', 'ｰ', 'ｱ', 'ｲ',
        'ｳ', 'ｴ', 'ｵ', 'ｶ', 'ｷ', 'ｸ', 'ｹ', 'ｺ', 'ｻ', 'ｼ', 'ｽ', 'ｾ', 'ｿ',
        'ﾀ', 'ﾁ', 'ﾂ', 'ﾃ', 'ﾄ', 'ﾅ', 'ﾆ', 'ﾇ', 'ﾈ', 'ﾉ', 'ﾊ', 'ﾋ', 'ﾌ',
        'ﾍ', 'ﾎ', 'ﾏ', 'ﾐ', 'ﾑ', 'ﾒ', 'ﾓ', 'ﾔ', 'ﾕ', 'ﾖ', 'ﾗ', 'ﾘ', 'ﾙ',
        'ﾚ', 'ﾛ', 'ﾜ', 'ﾝ', 'ﾞ', 'ﾟ', ' '
      }
  def private full-katakana =
      {{FastArray-of char}
        '！', '”', '＃', '＄', '％', '＆', '’', '（', '）', '＝', '～', '｜', '‘',                         
        '｛', '＋', '＊', '｝', '＜', '＞', '？', '＿', 'ー', '＾', '￥', '＠', '「',                         
        '；', '：', '」', '、', '。', '・', '￥',
        'ヲ', 'ァ', 'ィ', 'ゥ', 'ェ', 'ォ', 'ャ', 'ュ', 'ョ', 'ッ', 'ー', 'ア', 'イ',
        'ウ', 'エ', 'オ', 'カ', 'キ', 'ク', 'ケ', 'コ', 'サ', 'シ', 'ス', 'セ', 'ソ',
        'タ', 'チ', 'ツ', 'テ', 'ト', 'ナ', 'ニ', 'ヌ', 'ネ', 'ノ', 'ハ', 'ヒ', 'フ',
        'ヘ', 'ホ', 'マ', 'ミ', 'ム', 'メ', 'モ', 'ヤ', 'ユ', 'ヨ', 'ラ', 'リ', 'ル',
        'レ', 'ロ', 'ワ', 'ン', '゛', '゜', ' '
      }
  def private half-dakuon-katakana =
      {{FastArray-of char}
        'ｶ', 'ｷ', 'ｸ', 'ｹ', 'ｺ', 'ｻ', 'ｼ', 'ｽ', 'ｾ', 'ｿ',
        'ﾀ', 'ﾁ', 'ﾂ', 'ﾃ', 'ﾄ', 'ﾊ', 'ﾋ', 'ﾌ', 'ﾍ', 'ﾎ'
      }
  def private full-dakuon-katakana =
      {{FastArray-of char}
        'ガ', 'ギ', 'グ', 'ゲ', 'ゴ', 'ザ', 'ジ', 'ズ', 'ゼ', 'ゾ',
        'ダ', 'ヂ', 'ヅ', 'デ', 'ド', 'バ', 'ビ', 'ブ', 'ベ', 'ボ'
      }
  def private half-han-dakuon-katakana =
      {{FastArray-of char}
        'ﾊ', 'ﾋ', 'ﾌ', 'ﾍ', 'ﾎ'
      }
  def private full-han-dakuon-katakana =
      {{FastArray-of char}
        'パ', 'ピ', 'プ', 'ペ', 'ポ'
      }
  def private escape-characters =
      {{FastArray-of char}
        '\n', '\r', '\t', '\'', '\"', '\\', '\{', '\}',
        '\|', '\ ', '\=', '\[', '\]', '\(', '\)'
      }

  {doc-next
    {purpose
        文字列が指定された文字エンコーディングのセットに含まれているかどうか確認します。
    }
    {parameter str, チェック対象の文字列}
    {parameter start,
        検査対象となる最初の文字のインデックス。指定しない場合、既定値は配列の先頭です。
    }
    {parameter end,
        検査対象の最後の文字のインデックスの次のインデックス。
        指定しない場合、既定値は配列の現在の末尾 (buf.size) です。
    }
    {parameter name, {docref CharEncoding} の名前}
    {return-vals
        すべての文字がその文字セット内に存在する場合は true、
        文字セット内に存在しない文字がある場合は false になります。
    }
  }
  {define-proc public inline {can-encode?
                                 str:String, start:int = 0, end:int = str.size, name:String = "shift-jis"
                             }:bool
    def charenc = {get-character-encoding-by-name name}
    def max-bv-size = charenc.transcode-max-expansion-factor * str.size
    def buf = {CharVec max-size = max-bv-size}
    {for c:char in str do
        {buf.append c}
    }    
    {return
        {charenc.all-chars-in-encoding? buf, start = start, end = end}
    }
  }

  {doc-next
    {purpose 全角を半角に変換します。}
    {parameter str, 半角に変換する文字列}
  }
  {define-proc public inline {full-to-half str:String}:String
    def buf = {StringBuf}
    {for i:int = 0 below str.size do
        def c = str[i]
        ||数値の場合
        {if ('０' <= c and c <= '９') then
            {buf.append ((c - '０' + '0') asa char)}
            {continue}
        }
        ||アルファベットの場合
        {if ('ａ' <= c and c <= 'ｚ') then
            {buf.append ((c - 'ａ' + 'a') asa char)}
            {continue}
         elseif ('Ａ' <= c and c <= 'Ｚ') then
            {buf.append ((c - 'Ａ' + 'A') asa char)}
            {continue}
        }
        ||カタカナの場合
        def dakuon-index = {StringUtil.full-dakuon-katakana.find c}
        {if dakuon-index > -1 then
            {buf.append StringUtil.half-dakuon-katakana[dakuon-index]}
            {buf.append 'ﾞ'}
            {continue}
        }
        def han-dakuon-index = {StringUtil.full-han-dakuon-katakana.find c}
        {if han-dakuon-index > -1 then
            {buf.append StringUtil.half-han-dakuon-katakana[han-dakuon-index]}
            {buf.append 'ﾟ'}
            {continue}
        }
        def index = {StringUtil.full-katakana.find c}
        {if index > -1 then
            {buf.append StringUtil.half-katakana[index]}
            {continue}
        }
        {buf.append c}
    }
    {return {buf.to-String}}
  }

  {doc-next
    {purpose 半角を全角に変換します。}
    {parameter str, 全角に変換する文字列}
  }
  {define-proc public inline {half-to-full str:String}:String
    def buf = {StringBuf}
    {for i:int = 0 below str.size do
        def c = str[i]
        ||数値の場合
        {if ('0' <= c and c <= '9') then
            {buf.append ((c - '0' + '０') asa char)}
            {continue}
        }
        ||アルファベットの場合
        {if ('a' <= c and c <= 'z') then
            {buf.append ((c - 'a' + 'ａ') asa char)}
            {continue}
         elseif ('A' <= c and c <= 'Z') then
            {buf.append ((c - 'A' + 'Ａ') asa char)}
            {continue}
        }
        ||カタカナの場合
        def dakuon-index = {StringUtil.half-dakuon-katakana.find c}
        {if dakuon-index > -1 and str[i + 1] == 'ﾞ' then
            {buf.append StringUtil.full-dakuon-katakana[dakuon-index]}
            {inc i}
            {continue}
        }
        def han-dakuon-index = {StringUtil.half-han-dakuon-katakana.find c}
        {if han-dakuon-index > -1 and str[i + 1] == 'ﾟ' then
            {buf.append StringUtil.full-han-dakuon-katakana[han-dakuon-index]}
            {inc i}
            {continue}
        }
        def index = {StringUtil.half-katakana.find c}
        {if index > -1 then
            {buf.append StringUtil.full-katakana[index]}
            {continue}
        }
        {buf.append c}
    }
    {return {buf.to-String}}
  }

  {doc-next
    {purpose ひらがなをカタカナに変換します。}
    {parameter str, カタカナに変換するひらがな文字列}
  }
  {define-proc public inline {hiragana-to-katakana str:String}:String
    def buf = {StringBuf}
    {for c in str do
        {if ('ぁ' <= c and c <= 'ん') then
            {buf.append ((c - 'ぁ' + 'ァ') asa char)}
            {continue}
        }
        {buf.append c}
    }
    {return {buf.to-String}}
  }

  {doc-next
    {purpose カタカナをひらがなに変換します。}
    {parameter str, ひらがなに変換するカタカナ文字列}
  }
  {define-proc public inline {katakana-to-hiragana str:String}:String
    def buf = {StringBuf}
    {for c in str do
        {if ('ァ' <= c and c <= 'ン') then
            {buf.append ((c - 'ァ' + 'ぁ') asa char)}
            {continue}
        }
        {if (c == 'ヵ') then
            {buf.append 'か'}
         elseif (c == 'ヶ') then
            {buf.append 'け'}
         elseif (c == 'ヴ') then
            {buf.append 'う'}
            {buf.append '゛'}
         else
            {buf.append c}
        }
    }
    {return {buf.to-String}}
  }

  {doc-next
    {purpose
        文字列が指定した文字種で構成されているかどうかをチェックします。
    }
    {parameter str, チェック対象の文字列}
    {parameter half-number?, 半角数字を許可するかどうか}
    {parameter half-alpha?, 半角英字を許可するかどうか}
    {parameter half-mark?, 半角記号を許可するかどうか}
    {parameter half-katakana?, 半角カタカナを許可するかどうか}
    {parameter full-number?, 全角数字を許可するかどうか}
    {parameter full-alpha?, 全角英字を許可するかどうか}
    {parameter full-mark?, 全角記号を許可するかどうか}
    {parameter full-katakana?, 全角カタカナを許可するかどうか}
    {parameter hiragana?, ひらがなを許可するかどうか}
    {parameter reg-exp, 許可する文字種の正規表現}
    {return-vals
        許可された文字種のみで構成されている場合、true を返します。
    }
  }
  {define-proc public inline {is-member?
                                 str:String,
                                 half-number?:bool = true,
                                 half-alpha?:bool = true,
                                 half-mark?:bool = true,
                                 half-katakana?:bool = true,
                                 full-number?:bool = true,
                                 full-alpha?:bool = true,
                                 full-mark?:bool = true,
                                 full-katakana?:bool = true,
                                 hiragana?:bool = true,
                                 slash?:bool = false,
                                 space?:bool = false,
                                 hyphen?:bool = false,
                                 reg-exp:#String = null
                             }:bool

    def half-number-str = {if half-number? then "0-9" else ""}
    def half-alpha-str = {if half-alpha? then "a-zA-Z" else ""}
    def half-mark-str = {if half-mark? then "-\\^\\\\!\"#\\$%&\'\\(\\)=~\|`\{+\\*\}<>\\?_@\[;:,\\./\\" else ""}
    def half-mark-str2 = {if half-mark? then "\|\\\[\|\\\]" else ""}
    def half-katakana-str = {if half-katakana? then "｡-ﾟ" else ""}
    def full-number-str = {if full-number? then "０-９" else ""}
    def full-alpha-str = {if full-alpha? then "ａ-ｚＡ-Ｚ" else ""}
    def full-mark-str = {if full-mark? then  "！”＃＄％＆’（）＝～｜‘｛＋＊｝＜＞？＿ー＾￥＠「；：」、。・￥" else ""}
    def full-katakana-str = {if full-katakana? then "ァ-ヺ" else ""}
    def hiragana-str = {if hiragana? then "あ-ん" else ""}
    def reg-exp-str = {if-non-null reg-exp then "\|" & reg-exp else ""}
    
    def reg-str = 
        "^([" & half-number-str & half-alpha-str & half-mark-str & half-katakana-str &
    full-number-str & full-alpha-str & full-mark-str & full-katakana-str & hiragana-str & 
    "]"& half-mark-str2 & reg-exp-str & ")*$" 
    
    {return
        {regexp-match? reg-str, str}
    }
  }

  {doc-next
    {purpose
        文字列からバイト数を取得します。
    }
    {parameter str, バイト数を取得したい文字列}
    {parameter name, {docref CharEncoding} の名前}
    {return-vals
        次の 2 つの値を返します。
        {itemize
            {item 文字列から求めたバイト数}
            {item バイトの配列}
        }
    }
  }
  {define-proc public inline {get-bytes str:String, name:String = "shift-jis"}:(int, ByteVec)
    def charenc = {get-character-encoding-by-name name}
    def max-bv-size = charenc.transcode-max-expansion-factor * str.size
    def bv = {ByteVec max-size = max-bv-size}
    def (ret1, ret2) = {encode-characters str, bv, charenc} 
    {return ret2, bv}
  }

  {doc-next
    {purpose
        バイト数で指定された部分文字列を返します。
    }
    {parameter str, 対象となる文字列}
    {parameter start,
        str 内における部分文字列の開始位置。最左端の文字の位置は 0 です。
        最右端の文字の位置は (str.size - 1) です。有効値は 0 〜 (str.size - 1) の範囲です
        (0 と (str.size - 1) を含む)。
    }
    {parameter length,
        部分文字列の長さ。つまり、部分文字列内のバイト数です。
    }
    {parameter name, {docref CharEncoding} の名前}
    {return-vals
        次の 2 つの値を返します。
        {itemize
            {item str の指定された部分文字列が格納された {docref String}。}
            {item デコードされたバイト数。}
        }
        
    }
  }
  {define-proc public inline {substr-with-bytes
                                 str:String, start:int, length:int, name:String = "shift-jis"
                             }:(String, int)
    def (bytes, byte-array) = {StringUtil.get-bytes str}
    {if bytes < (start + length) then
        {throw {ArrayBoundsException "境界外です"}}
    }
    def (num-bytes-decoded, chars) =
        {decode-characters
            byte-array, {get-character-encoding-by-name name}, in-start = start, in-end = start + length
        }
    {return (chars, num-bytes-decoded)}
  }
  
  {doc-next
    {purpose
        文字列が{docref bool}か否かを判断する。{param str}が
        true/TRUE及びfalse/FALSEの場合はtrueを返す。
    }
    {parameter str, 文字列}
    {parameter ignore-case?, 大文字・小文字の判断可否を無視}
    {return-vals 成否}
  }
  {define-proc public inline {is-bool?
                                 str:String,
                                 ignore-case?:bool = true
                             }:bool
    {return
        ({str.equal? ignore-case? = ignore-case?, "true"} or
         {str.equal? ignore-case? = ignore-case?, "false"})
    }
  }

  {doc-next
    {purpose
        文字列から{docref bool}へ変換する。{param str}がtrue/TRUEの場合は、
        trueを返し、false/FALSEの場合はfalseを返す。
    }
    {parameter str, 文字列}
    {parameter ignore-case?, 大文字・小文字の判断可否を無視}
    {return-vals 成否}
  }
  {define-proc public inline {to-bool
                                 str:String,
                                 ignore-case?:bool = true
                             }:bool
    {if {StringUtil.is-bool? str} then
        {if {str.equal? ignore-case? = ignore-case?, "true"} then
            {return true}
         elseif {str.equal? ignore-case? = ignore-case?, "false"} then
            {return false}
        }
    }
    {throw {CastException str, bool}}
  }

  {doc-next
    {purpose
        文字列が数値か否かを判断する。{param str}が数値の場合はtrueを返す。
    }
    {parameter str, 文字列}
    {return-vals 可否}
  }
  {define-proc public inline {is-number? str:String}:bool
    {return {regexp-match? "^(-?)([1-9][0-9]*)?[0-9](\\.[0-9]*[1-9])?$", str}}
  }

  {doc-next
    {purpose
        文字列がアルファベットか否かを判断する。{param str}がアルファベットの場合はtrueを返す。
    }
    {parameter str, 文字列}
    {return-vals 可否}
  }
  {define-proc public inline {is-alphabet? str:String}:bool
    {return {regexp-match? "^[a-zA-Z]+$", str}}
  }

  {doc-next
    {purpose
        文字列が8進数か否かを判断する。{param str}が8進数の場合はtrueを返す。
    }
    {parameter str, 文字列}
    {return-vals 可否}
  }
  {define-proc public inline {is-oct? str:String}:bool
    {return {regexp-match? "^[0-7]+$", str}}
  }

  {doc-next
    {purpose
        文字列が16進数か否かを判断する。{param str}が16進数の場合はtrueを返す。
    }
    {parameter str, 文字列}
    {return-vals 可否}
  }
  {define-proc public inline {is-hex? str:String}:bool
    {return {regexp-match? "^[a-fA-F0-9]+$", str}}
  }

  {doc-next
    {purpose
        文字列を指定した{param length}の長さに切り取り、
        残りの部分を{param alternating-str}の文字列に変換する。
    }
    {parameter str, 文字列}
    {parameter length, 切り取る文字列の長さ}
    {parameter alternating-str, 代替文字列}
    {return-vals 文字列}
  }
  {define-proc public inline {alternate 
                                 str:String, 
                                 length:int,
                                 alternating-str:String = "..."
                             }:String
    {return {StringUtil.head str, length} & alternating-str}
  }

  {doc-next
    {purpose
        文字列の最初から指定した文字数分切り取ります。
    }
    {parameter str, 文字列}
    {parameter length, 切り取る文字数}
    {return-vals 切り取られた文字列}
  }
  {define-proc public inline {head
                                 str:String,
                                 length:int
                             }:String
    {return {StringUtil.substr str, 0, length}}
  }
  || TODO: head-by-char (ある文字が見つかったところまで切り取り)
  
  {doc-next
    {purpose
        文字列の最後から指定した文字数分切り取ります。
    }
    {notes
        これはString.tailとは違います。String.tailは文字の位置を指定しますが、
        これは文字数を指定します。
    }
    {parameter str, 文字列}
    {parameter length, 切り取る文字数}
    {return-vals 切り取られた文字列}
  }
  {define-proc public inline {tail
                                 str:String,
                                 length:int
                             }:String
    {return {StringUtil.substr str, str.size - length, length}}
  }
  || TODO: tail-by-char (ある文字が見つかったところまで切り取り)

  {doc-next
    {purpose 文字列の最初から指定したインデックスで分割します。}
    {parameter str, 文字列}
    {parameter length, インデックス}
    {return-vals 分割された文字列}
  }
  {define-proc public inline {separate
                                 str:String,
                                 length:int
                             }:(head:String, tail:String)
    {return
        {StringUtil.head str, length},
        {StringUtil.tail str, str.size - length}
    }
  }

  {doc-next
    {purpose 文字列の最初から指定した文字が見つかったところまでで分割します。}
    {parameter str, 文字列}
    {parameter c, 分割される区切り文字}
    {return-vals 分割された文字列}
    {notes もしcが存在しない場合、tailには空文字（""）が返ります。}
  }
  {define-proc public inline {separate-by-char
                                 str:String,
                                 c:char
                             }:(head:String, tail:String)
    def i = {str.find c}
    {if i == -1 then
        {return str, ""}
    }
    {return
        {StringUtil.head str, i},
        {StringUtil.tail str, str.size - i - 1}
    }
  }

  {doc-next
    {purpose 固定長形式の文字列を分割します。}
    {parameter str, 文字列}
    {parameter ..., 区切る文字長}
    {return-vals 区切られた文字列の一覧}
    {details
        以下はサンプルです。
        {curl-code
            {StringUtil.separate-fixed-length "aaa bbbbcc", 4, 4, 2}
            ||== "aaa ", "bbbb", "cc"
        }
    }
  }
  {define-proc public inline {separate-fixed-length
                                 str:String,
                                 ...:int
                             }:StringArray
    def strs = {StringArray}
    let start:int = 0
    {for len in {splice ...} do
        {strs.append {str.substr start, len}}
        set start = start + len
    }
    {return strs}
  }

  {doc-next
    {purpose 文字列の指定した文字数分切り取ります。}
    {notes
        これはString.substrとは違います。文字数がstrのサイズを越えた場合にエラーが発生せず、
        自動的に最大サイズを計算し、適切な文字数に変換してくれます。
    }
    {parameter str, 文字列}
    {parameter start, 開始位置}
    {parameter length, 切り取る文字数}
    {return-vals 切り取られた文字列}
  }
  {define-proc public inline {substr str:String, start:int, length:int}:String
    {return 
        {str.substr 
            || start
            {if start < 0 then
                0 || no error
             else
                start
            }, 
            || length
            {if str.size - start - length < 0 then
                str.size - start || no error
             else
                length
            }
        }
    }
  }

  {doc-next
    {purpose 文字列が指定したサイズに満たない場合、padding-charをパディングしてくれます。（右埋め）}
    {parameter str, 文字列}
    {parameter length, 文字数}
    {return-vals 結果文字列}
  }
  {define-proc public inline {pad-right
                                 str:String,
                                 length:int,
                                 padding-char:char = '0'
                             }:String
    {return {StringUtil.rjust str, length, padding = padding-char}}
  }

  {doc-next
    {purpose 文字列が指定したサイズに満たない場合、padding-charをパディングしてくれます。（左埋め）}
    {parameter str, 文字列}
    {parameter length, 文字数}
    {return-vals 結果文字列}
  }
  {define-proc public inline {pad-left
                                 str:String,
                                 length:int,
                                 padding-char:char = '0'
                             }:String
    {return {StringUtil.ljust str, length, padding = padding-char}}
  }

  {doc-next
    {purpose 文字列を開始1文字を大文字、残りを小文字に変換してくれます。人名、地名などに利用できます。}
    {parameter str, 文字列}
    {return-vals 結果文字列}
  }
  {define-proc public inline {capitalize
                                 str:String
                             }:String
    {return 
        {{StringUtil.head str, 1}.to-upper-clone} &
        {{StringUtil.tail str, str.size - 1}.to-lower-clone}
    }
  }


  || ported from Ruby -- BEGIN -- by D.TIAN
  
  {doc-next
    {purpose
        指定したサイズ(width)より文字列が短い場合、
        既存文字列を中央寄せで両側にpaddingで補完してくれる。
    }
    {parameter str, 文字列}
    {parameter length, 補完後の文字列幅}    
    {parameter padding, 補完用文字,デフォルトはスペース}
    {return-vals 結果文字列}
  }
  {define-proc public inline {center
                                 str:String,
                                 length:int,
                                 padding:char = ' '
                             }:String
    {return {StringUtil.pad-string str, length, padding = padding}}
  }

  {doc-next
    {purpose
        指定したサイズ(width)より文字列が短い場合、
        既存文字列を左寄せで右側にpaddingで補完してくれる。
    }
    {parameter str, 文字列}
    {parameter length, 補完後の文字列幅}    
    {parameter padding, 補完用文字,デフォルトはスペース}
    {return-vals 結果文字列}
    {notes 類似API:pad-left}
  }
  {define-proc public inline {ljust
                                 str:String, length:int, padding:char = ' '
                             }:String
    {return {StringUtil.pad-string str, length, padding = padding, justify = -1}}
  }

  {doc-next
    {purpose
        指定したサイズ(width)より文字列が短い場合、
        既存文字列を右寄せで右側にpaddingで補完してくれる。
    }
    {parameter str, 文字列}
    {parameter width, 補完後の文字列幅}    
    {parameter padding, 補完用文字,デフォルトはスペース}
    {return-vals 結果文字列}
    {notes 類似API:pad-right}
  }
  {define-proc public inline {rjust
                                 str:String, length:int, padding:char = ' '
                             }:String
    {return {StringUtil.pad-string str, length, padding = padding, justify = 1}}
  }

  {doc-next
    {purpose
        指定したサイズ(width)より文字列が短い場合、
        既存文字列を右寄せで右側にpaddingで補完してくれる。
    }
    {parameter str, 文字列}
    {parameter width, 補完後の文字列幅}    
    {parameter padding, 補完用文字,デフォルトはスペース}
    {parameter justify, 調整位置, 0の場合中央寄せ、-1 の場合左寄せ、1の場合右寄せ}    
    {return-vals 結果文字列}
  }
  {define-proc public inline {pad-string
                                 str:String,
                                 width:int,
                                 padding:char = ' ',
                                 justify:int = 0 || default is center (0)
                             }:String
    {let length:int = str.size}
    {if width <= length then
        {return str}
     else
        {let margin:int = width - length}
        {let left:int = {floor margin / 2} asa int}
        {let right:int = margin - left}
        {if justify < 0 then
            set left = margin
            set right = 0
         elseif justify > 0 then
            set right = margin
            set left = 0
        }
        {return
            {String.repeat-char padding, left} &
            str &
            {String.repeat-char padding, right}
        }
    }
  }

  {doc-next
    {purpose 指定した文字列の数を返却する。}
    {parameter str, 文字列}
    {parameter target, 検索文字列。デフォルトはスペース}
    {parameter ignore-case?, 大文字小文字を区別するフラグ。デフォルトは区別する}
    {return-vals 文字列strにあるtargetの数}
  }
  {define-proc public inline {count
                                 str:String,
                                 target:String = " ",
                                 ignore-case?:bool = false
                             }:int
    {let count:int = 0 }
    {let starting-index:int = 0}
    {let find-index = -1}
||--    {let find-indexes:{Array-of int} = {{Array-of int}}}
    {while true do
        set find-index = {str.find-string
                             target,
                             ignore-case? = ignore-case?,
                             starting-index = starting-index
                         }
        
        {if find-index != -1 then
            set starting-index = find-index + target.size
            set count = count + 1
         else
            {break}
        }
    }
    {return count}
  }

  {doc-next
    {purpose 指定した文字列を元の文字列から削除する。}
    {parameter str, 元の文字列}
    {parameter ..., 削除対象の文字列}
    {return-vals 削除後の文字列}
  }
  {define-proc public inline {delete
                                 str:String,
                                 ...:String
                             }:String
    def buf = {StringBuf str}
    {for ds in {splice ...} do
        {buf.replace ds, ""}
    }
    {return {buf.to-String}}
  }

  || TODO:
||--  {define-proc public {crypt  s:String = ""}:String
||--    {throw {Exception "not supported yet"}}
||--  }

  {doc-next
    {purpose 小文字へ変換}
    {parameter str, 文字列}
    {return-vals 小文字の文字列}
  }
  {define-proc public inline {lowercase
                                 str:String || = ""
                             }:String
    {return {str.to-lower-clone}}
  }
  
  {doc-next
    {purpose 大文字へ変換}
    {parameter str, 文字列}
    {return-vals 大文字の文字列}
  }
  {define-proc public inline {uppercase
                                 str:String || = ""
                             }:String
    {return {str.to-upper-clone}}
  }

  || TODO:
||--  {define-proc public {dump str:String = ""}:String
||--    {throw {Exception "not supported yet"}}
||--  }

  || TODO:
||--  {define-proc public {hex str:String = ""}:int
||--    {throw {Exception "not supported yet"}}
||--  }

  {doc-next
    {purpose 文字列を含むか否かをチェック}
    {parameter str, 文字列}
    {parameter target, 検索文字列}
    {return-vals 存在するか否か}
  }
  {define-proc public inline {contains? || instead of include?
                                 str:String,
                                 target:String
                             }:bool
    {return {str.find-string target} != -1}
  }

  {doc-next
    {purpose 文字列中に文字列を挿入します。}
    {parameter str, 文字列}
    {parameter istr, 挿入文字列}
    {parameter ..., 挿入位置}
    {return-vals 挿入後の文字列}
    {details
        以下はサンプルコードです。
        {curl-code
            || 日付に"/"（スラッシュ）区切り文字を挿入
            {StringUtil.insert "20090910", "/", 4, 6}
            || 結果："2009/09/10"
            
            || 郵便番号に"-"（ハイフン）区切り文字を挿入
            {StringUtil.insert "1230001", "-", 3}
            || 結果："123-0001"
        }
    }
    {notes 挿入した文字列を逆に削除するにはStringUtil.deleteプロシージャを利用してください。}
  }
  {define-proc public inline {insert str:String, istr:String, ...:int}:String
    def buf = {StringBuf}
    let pos:int = 0
    {for i-pos in {splice ...} do
        {if i-pos > str.size then
            {break}
        }
        {buf.concat {str.substr pos, i-pos - pos}}
        {buf.concat istr}
        set pos = i-pos
    }
    {buf.concat {str.substr pos, str.size - pos}}
    {return {buf.to-String}}
  }

  || TODO:
||--  {define-proc public {oct s:String = ""}:int
||--    {throw {Exception "not supported yet"}}
||--  }

  {doc-next
    {purpose self 内の文字の順序を逆にします。}
    {parameter s, 文字列}
    {return-vals 逆順の文字列}
  }
  {define-proc public inline {reverse str:String}:String
    {let sb:StringBuf = {StringBuf str}}
    {sb.reverse}
    {return {sb.to-String}}
  }

  || TODO:
||--  {define-proc public {squeeze str:String = ""}:String
||--    {throw {Exception "not supported yet"}}
||--  }

  {doc-next
    {purpose self の先頭および末尾の文字を削除します。}
    {parameter str, 文字列}
    {return-vals trim後の文字列}
  }
  {define-proc public inline {trim str:String}:String
    {return {str.trim-clone}}
  }

  {doc-next
    {purpose self の先頭の文字を削除します。}
    {parameter str, 文字列}
    {return-vals trim後の文字列}
  }
  {define-proc public inline {ltrim str:String}:String
    {return {str.trim-left-clone}}
  }

  {doc-next
    {purpose self の末尾の文字を削除します。}
    {parameter str,文字列}
    {return-vals trim後の文字列}
  }
  {define-proc public inline {rtrim str:String}:String
    {return {str.trim-right-clone}}
  }

  || TODO:
||--  {define-proc public {sum bits:int = 16}:int
||--    {throw {Exception "not supported yet"}}
||--  }

  || TODO:
||--  {define-proc public {swapcase str:String = ""}:String
||--    {throw {Exception "not supported yet"}}
||--  }

  || TODO:
||--  {define-proc public {unpack template:String, str:String = ""}:String
||--    {throw {Exception "not supported yet"}}
||--  }
  
  || ported from Ruby -- END --

  || ported from Java -- BEGIN -- by D.TIAN
  || TODO: プロシージャ名は小文字・Curl命名ルールにすべき
||--  {define-proc public {getBytes enc:String = "shift-jis"}:ByteVec
||--    {throw {Exception "not supported yet"}}
||--  }
||--
||--  {define-proc public {hasCode}:int
||--    {throw {Exception "not supported yet"}}
||--  }
||--
||--  {define-proc public {lastIndexOf sc:any}:int
||--    {throw {Exception "not supported yet"}}
||--  }
  || ported from java -- END --

  {doc-next
    {purpose 文字列から文字型の配列を生成します。}
    {parameter str, 文字列}
    {return-vals 文字型（char）の配列}
  }
  {define-proc public inline {to-chars
                                 str:String
                             }:{Array-of char}
    def chars = {{Array-of char}}
    {for c in str do
        {chars.append c}
    }
    {return chars}
  }

  {doc-next
    {purpose anyから文字列を生成します。nullは""（空文字）となります。}
    {parameter any, オブジェクト}
    {return-vals 文字列}
  }
  {define-proc public inline {to-String v:any}:String
    {return
        {if v == null then
            ""
         else
            v & ""
        }
    }
  }
}

