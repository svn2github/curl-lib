||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @authors Hitoshi Okada, xin.zhao
|||

{import * from COM.CURL.LIB.CRYPTO}

{define-proc {string2bytes from:String}:ByteVec
    def len = from.size
    def bytes = {ByteVec max-size = len}
    {for i = 0 below len do
        {bytes.append {from.get i} asa byte}
    }
    {return bytes}
}

{TestSuite "COM.CURL.LIB.CRYPTO",
    {test-case "public key encrypt/decrypto",
        || TODO
    },
    {test-case "common key encrypt/decrypto",
        def secret-file = "file/secret-file"
        {encrypt-with-common-key "pass", "abcde", {write-open-byte {url secret-file}}}
        {TestCondition.assert
            {decrypt-with-common-key "pass", {read-open-byte {url secret-file}}} == "abcde"
        }
        {require-exception Exception do
            {decrypt-with-common-key "xxxx", {read-open-byte {url secret-file}}}
        }
        {delete {url secret-file}, error-if-missing? = false}
    },
    {test-case "message-digest",
        {TestCondition.assert
            {sha-1 "password"} == "5BAA61E4C9B93F3F0682250B6CF8331B7EE68FD8"}
        {TestCondition.assert
            {sha-1 "test1234"} == "9BC34549D565D9505B287DE0CD20AC77BE1D3F2C"}
        {TestCondition.assert
            {md5 "password"} == "5F4DCC3B5AA765D61D8327DEB882CF99",
            message = {format "[MD5]password:%s", {md5 "password"}}
        }
        {TestCondition.assert
            {md5 "test1234"} == "16D7A4FCA7442DDA3AD93C9A726597E4",
            message = {format "[MD5]test1234:%s", {md5 "test1234"}}
        }
        {TestCondition.assert {md5 "hirokimino"} == "AE081683C9C2A6457074AF0A777FC164"}
        {TestCondition.assert {md5 "123412341234"} == "4D3DAEEB3EA3D90D4D6E7A20A5B483A9"}
        {TestCondition.assert {md5 "111111111111"} == "593C9B4A9390551D53E5CACF28EBD638"}
        {TestCondition.assert {md5 "1"} == "C4CA4238A0B923820DCC509A6F75849B"}
        {TestCondition.assert {md5 "012345678901234567890123456789012345678901234567890" & 
                                  "1234567890123456789012345678901234567890123456789"} == 
            "7A08B07E84641703E5F2C836AA59A170"
        }
        {TestCondition.assert {md5 "A"} == "7FC56270E7A70FA81A5935B72EACBE29"}
        {TestCondition.assert {md5 "HIROKIMINO"} == "96D7AC98CB491ABC23EC9914C8B156D4"}
        {TestCondition.assert {md5 "abcdefghi123456jklmnopqrstuvwxyz123456789"} == 
            "0289FF661CD08115B14E12853F1778E9"
        }
    },
    
    || HMAC-SHA1
    {test-case "hmac-sha-1",
        {TestCondition.assert
            {hmac-sha-1 "Jefe", "what do ya want for nothing?"}
            == "EFFCDF6AE5EB2FA2D27416D5F184DF9C259A7C79"}        
        {TestCondition.assert
            {hmac-sha-1 {ByteVec.from-size 20, 0x0b}, "Hi There"}
            == "B617318655057264E28BC0B6FB378C8EF146BE00"}       
        {TestCondition.assert
            {hmac-sha-1 {ByteVec.from-size 20, 0xaa}, {ByteVec.from-size 50, 0xdd}}
            == "125D7342B9AC11CD91A39AF48AA17B4F63F175D3"}       
        {TestCondition.assert
            {hmac-sha-1 {ByteVec.from-size 20, 0x0c}, "Test With Truncation"}
            == "4C1A03424B55E07FE7F27BE1D58BB9324A9A5A04"}
        {TestCondition.assert
            {hmac-sha-1
                {ByteVec 0x01,0x02,0x03,0x04,0x05,0x06,
                    0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,
                    0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,
                    0x15,0x16,0x17,0x18,0x19},
                {ByteVec.from-size 50, 0xcd}
            } == "4C9007F4026250C6BC8414F9BF50C86C2D7235DA"}
        {TestCondition.assert
            {hmac-sha-1
                {ByteVec 0x01,0x02,0x03,0x04,0x05,0x06,
                    0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,
                    0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,
                    0x15,0x16,0x17,0x18,0x19},
                {ByteVec.from-size 50, 0xcd}
            } == "4C9007F4026250C6BC8414F9BF50C86C2D7235DA"}
    },
    
    || HMAC-MD5
    {test-case "hmac-md5",
        {TestCondition.assert
            {hmac-md5
                "Jefe",
                "what do ya want for nothing?"
            } == "750C783E6AB0B503EAA86E310A5DB738"}
    }
}


