||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @authors Izumi Kashiwagi, Yoshitaka Fukuta
|||

{curl-file-attributes character-encoding = "utf8"}

{doc-next
    {purpose 追加した順番が保存される {docref Set-of} です。}
}
{define-class public serializable open {OrderedSet-of t:Type, key-hash-proc:any = value-hash, key-equality-proc:any = equal?}
  {inherits {Set-of t, key-hash-proc = value-hash, key-equality-proc = equal?}}

 {doc-next
    {purpose 追加された順番を保持する配列}
  }
  field private constant _order-array:{Array-of t}

  || 再ハッシュ中かどうか
  field private _rehashing?:bool = false

  {doc-next
    {purpose {ctext OrderedSet-of} を初期化します。}
  }
  {constructor public {default efficient-size:int = 4, ...:t}
    set self._order-array =
        {new {Array-of t}, efficient-size = efficient-size}
    {construct-super efficient-size = efficient-size, ...}
  }

  {doc-next
    {purpose {ctext OrderedSet-of} を初期化します。}
    {parameter from,
        {ctext self} の初期の内容は {param from} からコピーされます。
    }
  }
  {constructor public {clone-from
                          from:{OrderedSet-of t,
                                   key-hash-proc = key-hash-proc,
                                   key-equality-proc = key-equality-proc
                               }
                      }
    {construct-super.clone-from from}
    set self._order-array = {from._order-array.clone}
  }

  || docs inherited
  {setter public open {efficient-size requested-size:int}:void
    set self._order-array.efficient-size = requested-size
    {with self._rehashing? = true do
        set super.efficient-size = requested-size
    }
  }

  || docs inherited
  {method public {clear}:void
    {super.clear}
    {self._order-array.clear}
  }

  || docs inherited
  {method public open {clone}:{OrderedSet-of t,
                                  key-hash-proc = key-hash-proc,
                                  key-equality-proc = key-equality-proc
                              }
    {return
        {{OrderedSet-of t,
             key-hash-proc = key-hash-proc,
             key-equality-proc = key-equality-proc
         }.clone-from self}
    }
  }

  {doc-next
    {purpose インデックスに該当する要素を返します。}
    {parameter index, インデックス。}
    {return-vals 取得する要素。戻り値は {ctext self} の要素と同じデータ型を持ちます。}
  }
  {method public {get-member-by-index index:int}:t
    def (val:t, found?:bool) = {self._order-array.get-if-exists index}
    {if not found? then
        {throw {KeyNotFoundException "メンバが見つかりません。"}}
    }
    {return val}
  }

  {doc-next
    {purpose インデックスに該当する要素、および要素が見つかったかどうかを示すブール値を返します。}
    {parameter index, インデックス。}
    {return-vals
        取得する要素。戻り値は {ctext self} の要素と同じデータ型を持ちます。
        また、要素が見つかったかどうかを示すブール値を返します。
    }
  }
  {method public {get-member-if-exists-by-index index:int}:(value:t, found?:bool)
    {return
        {self._order-array.get-if-exists index}
    }
  }

  || docs inherited
  {method public {insert
                     e:t,
                     error-if-present?:bool = false
                 }:void
    def old-size = self.size
    {super.insert e, error-if-present? = error-if-present?}
    {if old-size == self.size then
        def index = {self._order-array.find e}
        {if index >= 0 then
            {self._order-array.remove index}
        }
     elseif self._rehashing? then
        {return}
    }    
    {self._order-array.append e}
  }

  || docs inherited
  {method public {insert-clone
                     e:t,
                     error-if-present?:bool = false
                 }:{OrderedSet-of t,
                       key-hash-proc = key-hash-proc,
                       key-equality-proc = key-equality-proc
                   }
    def clone = {self.clone}
    {clone.insert e, error-if-present? = error-if-present?}
    {return clone}
  }

  || docs inherited
  {method public {remove
                     e:t,
                     error-if-missing?:bool = true
                 }:void
    def old-size = self.size
    {super.remove e, error-if-missing? = error-if-missing?}
    {if old-size != self.size then
        def index = {self._order-array.find e}
        {if index >= 0 then
            {self._order-array.remove index}
        }
    }
  }

  || docs inherited
  {method public {remove-clone
                     e:t,
                     error-if-missing?:bool = true
                 }:{OrderedSet-of t,
                       key-hash-proc = key-hash-proc,
                       key-equality-proc = key-equality-proc
                   }
    def clone = {self.clone}
    {clone.remove e, error-if-missing? = error-if-missing?}
    {return clone}
  }

  {doc-next
    {purpose インデックスに該当する要素を削除します。}
    {parameter index, インデックス}
    {parameter error-if-missing?,
        ユーザーが存在しない要素を削除しようとしたときに
        このメソッドがエラーを生成するかどうかを示すブール値のフラグ。
        {ctext error-if-missing?} を {ctext true}
        に設定した場合、存在しない要素を削除しようとするとエラーがスローされます。
    }
  }
  {method public {remove-by-index
                     index:int,
                     error-if-missing?:bool = true
                 }:void
    def (val:t, found?:bool) = {self._order-array.get-if-exists index}
    {if not found? then
        {if error-if-missing? then
            {throw {KeyNotFoundException "メンバが見つかりません。"}}
        }
        {return}
    }
    {self.remove val, error-if-missing? = error-if-missing?}
  }

  {doc-next
    {purpose インデックスに該当する要素が 1 つ削除された、セットのクローンを返します。}
    {parameter index, インデックス}
    {parameter error-if-missing?,
        ユーザーが存在しない要素を削除しようとしたときに
        このメソッドがエラーを生成するかどうかを示すブール値のフラグ。
        {ctext error-if-missing?} を {ctext true}
        に設定した場合、存在しない要素を削除しようとするとエラーがスローされます。
    }
    {return-vals
        {docref Set-of} のインスタンス。オブジェクトは、{ctext self} と同じデータ型およびデータを持ちます。
        オブジェクトからは 1 つの要素が削除されています。
    }
  }
  {method public {remove-clone-by-index
                     index:int,
                     error-if-missing?:bool = true
                 }:{OrderedSet-of t,
                       key-hash-proc = key-hash-proc,
                       key-equality-proc = key-equality-proc
                   }
    def clone = {self.clone}
    {clone.remove-by-index index, error-if-missing? = error-if-missing?}
    {return clone}
  }

  || doc inherited
  {method public open {to-Iterator}:{Iterator-of t}
    {return {self._order-array.to-Iterator}}
  }

}

|| alias (shorthand for something)
{doc-next
    {purpose
        {curl-code
            {OrderedSet-of any}の略記法
        }
    }
}
{def public OrderedSet:ParameterizedType = {OrderedSet-of any}}
