||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @authors wangwx
|||

{doc-next {purpose 条件文（where句）}のクラスです。}
{define-class public open Condition

  field public-get private-set str:String
  field public-get private-set bind-vars:FastArray

  {doc-next
    {purpose {docref Record}から条件文を作成します。}
    {parameter str, 条件文}
    {parameter ..., バインド変数へセットする値}
  }
  {constructor public {default str:String, ...:any}
    set self.str = str
    set self.bind-vars = {FastArray ...}
  }

  {doc-next
    {purpose {docref Record}から条件文を作成します。}
    {parameter record, 条件文を生成するRecord。}
    {parameter pending?,
        Record がペンディング中の変更を保持している場合、
        (つまり、state が RecordState.modified に等しい場合)、
        この引数によってペンディング中の値か元の値のどちらが返されるかを決定します。
        既定ではペンディングされる前のデータが返されます。
    }
  }
  {constructor public {from-Record record:Record, pending?:bool = false}
    def fields = record.record-set.fields
    def buf = {StringBuf}
    set self.bind-vars = {FastArray max-size = fields.size}
    {for i:int = 0 below fields.size do
        {if i != 0 then
            {buf.concat " AND "}
        }
        def field-name = {fields.get-by-index i}.name
        {buf.concat field-name}
        {buf.concat " = ?"}
        {self.bind-vars.append {record.get field-name, pending? = pending?}}
    }
    set self.str = {buf.to-String}
  }
}

{doc-next {purpose SQL文を生成するユーティリティです。}}
{define-class public open SQLUtil

  {doc-next
    {purpose selectのSQL文を生成します。}
  }
  {define-proc public inline {select
                                 columns:String = "*", || select句
                                 table:String, 
                                 joins:#String = null, 
                                 condition:#Condition = null,
                                 group-by:#String = null,
                                 having-by:#String = null,
                                 order-by:#String = null,
                                 lock?:bool = false
                             }:(sql:String, bind-vars:#FastArray)

    {if-non-null having-by then
        {if group-by == null then
            {error "having句はgroup-by句と一緒に使う必要があります。"}
        }
    }

    {if-non-null group-by then
        {if lock? then
            {error "for update文をgroup-by句と一緒に使うことができません。"}
        }
    }
    
    def select-buf = {StringBuf "SELECT"}
    def bind-ary = {Array}

    {select-buf.concat " " & columns & " FROM " & table}

    {if-non-null joins then
        {select-buf.concat " " & joins}
    }

    {if-non-null condition then
        {select-buf.concat " WHERE " & condition.str}
        {for v in condition.bind-vars do
            {bind-ary.append v}
        }
    }
    {if-non-null group-by then
        {select-buf.concat " GROUP BY " & group-by}
    }
    {if-non-null having-by then
        {select-buf.concat " HAVING " & having-by}
    }
    {if-non-null order-by then
        {select-buf.concat " ORDER BY " & order-by}
    }
    {if lock? then
        {select-buf.concat " FOR UPDATE"}
    }
    
    {return ({select-buf.to-String}, bind-ary.underlying-FastArray)}
  }

  {doc-next
    {purpose insertのSQL文を生成します。}
    {parameter table, テーブル名}
    {parameter ..., Recordもしくはフィールド名=値。}
    {return-vals
        sql,sql文.
        bind-vars,バインド変数.
    }
    {details
        以下は{docref Record}から生成するSQL文の例です。
        {curl-code
            || recordはid,name,dtというフィールドを持つRecordオブジェクトです。
            {insert "User", record}
        }
        これは以下のように記述することもできます。
        {curl-code
            {insert "User", id=1, name="test", dt={DateTime}}
            || - 結果 -
            || sql="insert into User(id, name, dt) values(?, ?, ?)"
            || bind-vars={FastArray 1, "test", {DateTime}}
        }
    }
    {notes
        フィールド名はRecordField.nameから取得されますので、
        データベースのフィールド名とこの名前が一致する必要があります。
    }
  }
  {define-proc public inline {insert
                                 table:String,
                                 ...
                             }:(sql:String, bind-vars:FastArray)

    def args = {Arguments ...}

    {if args.size == 0 then
        {error "insert文に少なくとも一つのパラメータがあります。"}
    }
    
    def record? =  {SQLUtil.check-first-record? ...}

    {if record? and args.size > 1 then
        {error "insert文に複数のRecordパラメータが存在することができません。"}
    }

    {if not record? and not {SQLUtil.check-all-key-args? ...} then
        {error "パラメータにkey値が必要です。"}
    }
    
    def insert-buf = {StringBuf "INSERT INTO "}
    def values-buf = {StringBuf " VALUES"}
    def bind-ary = {Array}
    {insert-buf.concat table}
    
    {insert-buf.concat "("}
    {values-buf.concat "("}  
    
    {if record? then
        def record = args[0] asa Record
        || e.g) {isnert "User", record}
        def fields = record.record-set.fields
        {for i:int = 0 below fields.size do
            {if i != 0 then
                {insert-buf.concat ", "}
                {values-buf.concat ", "}
            }
            def field-name = {fields.get-by-index i}.name
            {insert-buf.concat field-name}
            {values-buf.append '?'}
            {bind-ary.append record[field-name]}
        }
     else
        || e.g) {insert "User", id=1, name="okada"}
        {for i:int = 0 below args.size do
            {if i != 0 then
                {insert-buf.concat ", "}
                {values-buf.concat ", "}
            }
            def (v, k) = args[i]
            {insert-buf.concat {non-null k}}
            {values-buf.append '?'}
            {bind-ary.append v}
        }
    }
    {insert-buf.concat ")"}
    {values-buf.concat ")"}
    {insert-buf.concat {values-buf.to-String}}
    {return ({insert-buf.to-String}, bind-ary.underlying-FastArray)}
  }
  
  {doc-next
    {purpose updateのSQL文を生成します。}
    {parameter table, テーブル名}
    {parameter condition, 条件文（where句）}
    {parameter ...,
        Recordもしくはフィールド名=値（更新するフィールド名と値）。
        Recordの場合はconditionが無効となり、自動的にconditionを生成します。
    }
    {return-vals
        sql,sql文.
        bind-vars,バインド変数.
    }
    {details
        以下は{docref Record}から生成するSQL文の例です。
        {curl-code
            || recordはid,name,dtというフィールドを持つRecordオブジェクトです。
            {update "User", record}
            || 上記は以下と同等です。
            {update "User", record, condition = {Condition.from-Record record}} 
        }
        これは以下のように記述することもできます。
        {curl-code
            {update "User",
                name = "", id = 1,
                condition = {Condition "id=? and name=?", 1, "test"}
            }
            || - 結果 - 
            || sql="update User set id=?, name=?, dt=? where id=1 and name='test'"
            || bind-vars={FastArray 1, "test", {DateTime}}

            || 以下のように条件を明示的に指定することも可能。
            {update "User", record, condition = {Condition "col1=20"}}
        }
    }
    {notes
        フィールド名はRecordField.nameから取得されますので、
        データベースのフィールド名とこの名前が一致する必要があります。
    }
  }
  {define-proc public inline {update
                                 table:String,
                                 condition:#Condition = null,
                                 ... 
                             }:(sql:String, bind-vars:#FastArray)

    def args = {Arguments ...}

    {if args.size == 0 then
        {error "update文に少なくとも一つのパラメータがあります。"}
    }
    
    def record? =  {SQLUtil.check-first-record? ...}

    {if record? and args.size > 1 then
        {error "update文に複数のRecordパラメータが存在することができません。"}
    }

    {if not record? and not {SQLUtil.check-all-key-args? ...} then
        {error "パラメータにkey値が必要です。"}
    }
    
    def update-buf = {StringBuf "UPDATE "}
    def bind-ary = {Array}
    {update-buf.concat table}
    
    {update-buf.concat " SET "}

    {if record? then
        || e.g) {update "User", record}
        def record = args[0] asa Record
        def fields = record.record-set.fields
        {for i:int = 0 below fields.size do
            def field-name = {fields.get-by-index i}.name
            {if i != fields.size - 1 then
                {update-buf.concat field-name & " = ? , "}
             else
                {update-buf.concat field-name & " = ? "}
            }
||--            {bind-ary.append {record.get field-name, pending? = true}}
            {bind-ary.append {record.get field-name}}
        }
     else
        || e.g)  {update "User",name = "", id = 1}
        {for i:int = 0 below args.size do
            def (v, k) = args[i]
            
            {if i != args.size - 1 then
                {update-buf.concat {non-null k} & " = ? , "}
             else
                {update-buf.concat {non-null k} & " = ? "}
            }
            {bind-ary.append v}
        }
    }
    
    {if-non-null condition then
        {update-buf.concat " WHERE " & condition.str}
        {for param in condition.bind-vars do
            {bind-ary.append param}
        }
    }
    {return ({update-buf.to-String}, bind-ary.underlying-FastArray)}
  }

  {doc-next
    {purpose deleteのSQL文を生成します。}
    {parameter table, テーブル名}
    {parameter condition, 条件文（where句）}
    {details
        以下は{docref Record}から生成するSQL文の例です。
        {curl-code
            {delete from "User", record}
            ||上記は以下と同等です。
            {delete from "User", condition = {Condition.from-Record record}}
            || - 結果 - 
            || sql="delete from User where id=? and name=? and dt=?"
            || bind-vars={FastArray 1, "test", {DateTime}}
        }
    }
    {return-vals
        sql,sql statements.
        bind-vars,values of ? in the sql statement.
    }
    {notes
        フィールド名はRecordField.nameから取得されますので、
        データベースのフィールド名とこの名前が一致する必要があります。
    }
  }
  {define-proc public inline {delete
                                 table:String,
                                 condition:#Condition = null,
                                 ...:Record
                             }:(sql:String, bind-vars:FastArray)

    def args = {Arguments ...}
    def size = args.size

    {if-non-null condition then
        {if size > 0 then
            {error "delete文にて、conditionとrecordという二つのパラメータを一緒に使うことができません。"}
        }
    }
    
    def delete-buf = {StringBuf "DELETE FROM " & table}
    def bind-ary = {Array}
    {if-non-null condition then
        {delete-buf.concat " WHERE " & condition.str}
        {for v in condition.bind-vars do      
            {bind-ary.append v}
        }
    }

    {if size == 1 then
        def rd-condition:Condition = {Condition.from-Record args[0], pending? = true}
        {delete-buf.concat " WHERE " & rd-condition.str}
        {for v in rd-condition.bind-vars do      
            {bind-ary.append v}
        }
     elseif size != 0 and size > 1 then
        {delete-buf.concat " WHERE "}
        {for rd key count:int in args do
            def rd-condition:Condition = {Condition.from-Record args[count], pending? = true}
            {if count != 0 then
                {delete-buf.concat " or "}
            }
            {delete-buf.concat " ( " & rd-condition.str & " ) "}
            {for v in rd-condition.bind-vars do      
                {bind-ary.append v}
            }
        }
    }
    
    {return ({delete-buf.to-String}, bind-ary.underlying-FastArray)}
  }
  
  {doc-next
    {purpose 一番目のパラメータのタイプがRecordの場合、戻り値をtrueにする。}
  }
  {define-proc private inline {check-first-record? ...}:bool
    def args = {Arguments ...}
    {if args.size > 0 and args[0] isa Record then
        {return true}
     else
        {return false}
    }
  }
  
  {doc-next
    {purpose 全てのパラメータのタイプがkey=valueの場合、戻り値をｔｒｕｅにする。} 
  }
  {define-proc private inline {check-all-key-args? ...}:bool
    def args = {Arguments ...}
    {for i:int = 0 below args.size do
        def (v, k) = args[i]
        {if k == null then
            {return false}
        }
    }
    {return true}
  }
}
