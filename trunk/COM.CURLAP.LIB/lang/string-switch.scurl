||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @authors Hitoshi Okada
|||


||
|| String switch macro (since 0.7)
||  - regexp-switch
||  - prefix-switch
||  - suffix-switch
||

{doc-next
    {purpose 文字列を正規表現によってスイッチします。}
    {details
        以下は例になります。
        {curl-code
            def str = "Curl is great, I like Curl"
            {regexp-switch str
             case "^Curl.*Curl$" do
                {output strは正規表現^Curl.*Curl$に一致。}
             case "^Java.*Java$", "^Ruby.*Ruby$" do
                {output strは正規表現^Java.*Java$もしくは^Ruby.*Ruby$に一致。}
             else
                {output str}
            }
        }
    }
}
{define-macro public {regexp-switch
                         ?var:identifier
                         ?clauses:{sequence
                                      case
                                      ?:{bounded-comma-sequence
                                            1, infinity,
                                            ?:{literal String}
                                        }
                                   do
                                      ?:tokens
                                  }
                         ?final:{optional else ?:tokens}
                     }
    {return
        {match-switch
            var,
            clauses,
            final,
            {Identifier "inner-regexp-match?"}
        }
    }
}

{doc-next
    {purpose 文字列を先頭文字によってスイッチします。}
    {details
        以下は例になります。
        {curl-code
            def str = "abcdef"
            {prefix-switch str, ignore-case? = true
             case "abc" do
                {output strはabcから始まります。}
             case "xyz", "xxx" do
                {output strはxyzもしくはxxxから始まります。}
             else
                {output str}
            }
        }
    }
}
{define-macro public {prefix-switch
                         ?var:identifier
                         ?ignore-case:{optional ,ignore-case? = ?:expression}
                         ?clauses:{sequence
                                      case
                                      ?:{bounded-comma-sequence
                                            1, infinity,
                                            ?:{literal String}
                                        }
                                   do
                                      ?:tokens
                                  }
                         ?final:{optional else ?:tokens}
                     }
    {return
        {match-switch
            var,
            clauses,
            final,
            {Identifier "inner-prefix?"},
            ignore-case = ignore-case
        }
    }
}

{doc-next
    {purpose 文字列を末尾文字によってスイッチします。}
    {details
        以下は例になります。
        {curl-code
            def str = "abcdef"
            {suffix-switch str, ignore-case? = true
             case "abc" do
                {output strの末尾はabcです。}
             case "def", "xxx" do
                {output strの末尾はdefもしくはxxxです。}
             else
                {output str}
            }
        }
    }
}
{define-macro public {suffix-switch
                         ?var:identifier
                         ?ignore-case:{optional ,ignore-case? = ?:expression}
                         ?clauses:{sequence
                                      case
                                      ?:{bounded-comma-sequence
                                            1, infinity,
                                            ?:{literal String}
                                        }
                                   do
                                      ?:tokens
                                  }
                         ?final:{optional else ?:tokens}
                     }
    {return
        {match-switch
            var,
            clauses,
            final,
            {Identifier "inner-suffix?"},
            ignore-case = ignore-case
        }
    }
}



|| --- private and package ---

{define-proc {match-switch
                 var:CurlSource,
                 clauses:SourceSequence,
                 final:CurlSource,
                 match-proc-name:Identifier,
                 ignore-case:#CurlSource = null
             }:CurlSource
    
    let content:#CurlSource
    
    || clauses (case ... do)
    {for i = clauses.size above 0 do
        def clause = clauses[i - 1]
        {syntax-switch clause, must-match? = true
         case
            {pattern
                case ?strs:{comma-sequence ?:{literal String}} do ?body:tokens
            }
         do
            {if i == clauses.size then
                || final (else)
                {syntax-switch final
                 case {pattern else ?body:tokens} do
                    set content = body
                }
            }
            def match-proc =
                {if-non-null ic = ignore-case then
                    def ignore-case? =
                        {syntax-switch ic
                         case {pattern ,ignore-case? = ?v:expression} do
                            v
                         else
                            {CurlSource.from-string "false"}
                        }
                    {expand-template
                        {?match-proc-name ?var, {StringArray ?strs}, ignore-case? = ?ignore-case?}
                    }
                 else
                    {expand-template
                        {?match-proc-name ?var, {StringArray ?strs}}
                    }
                }
            set content =
                {expand-template
                    {if ?match-proc then
                        ?body
                     else
                        ?content
                    }
                }
        }
    }
    {return {expand-template {value ?content}}}
}

{define-proc {inner-regexp-match?
                 var:String,
                 clauses:StringArray
             }:bool
    {for clause in clauses do
        {if {regexp-match? clause, var} then
            {return true}
        }
    }
    {return false}
}

{define-proc {inner-prefix?
                 var:String,
                 clauses:StringArray,
                 ignore-case?:bool = false
             }:bool
    {for clause in clauses do
        {if {var.prefix? clause, ignore-case? = ignore-case?} then
            {return true}
        }
    }
    {return false}
}

{define-proc {inner-suffix?
                 var:String,
                 clauses:StringArray,
                 ignore-case?:bool = false
             }:bool
    {for clause in clauses do
        {if {var.suffix? clause, ignore-case? = ignore-case?} then
            {return true}
        }
    }
    {return false}
}
