||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @authors Hitoshi Okada
|||

{import * from CURL.CRYPTO.CIPHER}

{doc-next
    {purpose 共通鍵暗号方式を利用して暗号化します。}
    {parameter algorithm, アルゴリズム（DES3, RC2, RC4）}
    {parameter common-key, 共通鍵（暗号鍵）}
    {parameter message, 暗号化する文字列}
    {parameter out, 暗号化したバイト列を書き出すストリーム}
}    
{define-proc public inline {encrypt-with-common-key
                               algorithm:Algorithm = Algorithm.des3,
                               common-key:String,
                               message:String,
                               out:ByteOutputStream
                           }:void
    {with-open-streams enc-out =
        {TranscodingTextOutputStream
            {EncryptStream
                out,
                {SessionKey.from-password algorithm, common-key}
            },
            CharEncoding.utf8,
            false
        }
     do
        {for i:int = 0 below message.size do
            {enc-out.write-one message[i] asa byte}
        }
    }
}

{doc-next
    {purpose 共通鍵暗号方式を利用して複合化します。}
    {parameter algorithm, アルゴリズム（DES3, RC2, RC4）}
    {parameter common-key, 共通鍵（複合鍵）}
    {parameter in, 複合化するバイト列のストリーム}
    {return-vals 複合化した文字列}
}    
{define-proc public inline {decrypt-with-common-key
                               algorithm:Algorithm = Algorithm.des3,
                               common-key:String,
                               in:ByteInputStream
                           }:String
    def buf = {StringBuf}
    {with-open-streams dec-in =
        {TranscodingTextInputStream
            {DecryptStream
                in,
                {SessionKey.from-password algorithm, common-key}
            }
        }
     do
        {for b in {dec-in.read} do
            {buf.append b asa char}
        }
        {return {buf.to-String}}
    }
}
