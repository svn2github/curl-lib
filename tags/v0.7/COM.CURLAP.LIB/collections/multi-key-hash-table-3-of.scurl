||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @authors Izumi Kashiwagi
|||

{doc-next
    {purpose
        3個のキーを持つ {docref HashTable-of} です。
    }
}
{define-class public {MultiKeyHashTable-3-of tk1:Type, tk2:Type, tk3:Type, te:Type}

  {doc-next
    {purpose
        内部管理用 {docref HashTable-of}
    }
  }
  field private constant _inner-hash:{HashTable-of {Tuple3-of tk1, tk2, tk3}, te}
  
  {doc-next
    {purpose
        複数キーのハッシュ値を保持する配列
    }
  }
  field private constant _hash-array:{Array-of int}
  
  {doc-next
    {purpose
        複数キーを保持する配列
    }
  }
  field private constant _key-array:{Array-of {Tuple3-of tk1, tk2, tk3}}
  
  {doc-next
    {purpose
        第一キー～第三キーまでに割り当てられたキー名の配列
    }
  }
  field private constant _key-names:{Array-of String}

  {doc-next
    {purpose
        複数キーの {docref HashTable-of} を生成します。
    }
    {parameter ...,
        残余引数は、ハッシュ テーブルに最初に設定するキーと要素を指定します。
        キーと要素をペアで (キー、要素の順に) 指定します。キーと要素は、カンマで区切ります。
    }
  }
  {constructor public {default ...}
    set self._inner-hash = {{HashTable-of {Tuple3-of tk1, tk2, tk3}, te}}
    set self._hash-array = {{Array-of int}}
    set self._key-array = {{Array-of {Tuple3-of tk1, tk2, tk3}}}
    set self._key-names = {{Array-of String}}
    {self.analyze-rest-args ...}
  }

  {doc-next
    {purpose
        複数キーの {docref HashTable-of} を生成し、キーにキー名を割り当てます。
    }
    {parameter key1-name, 第一キー}
    {parameter key2-name, 第二キー}
    {parameter key3-name, 第三キー}
    {parameter ...,
        残余引数は、ハッシュ テーブルに最初に設定するキーと要素を指定します。
        キーと要素をペアで (キー、要素の順に) 指定します。キーと要素は、カンマで区切ります。
    }
  }
  {constructor public {from-key-name
                          key1-name:String,
                          key2-name:String,
                          key3-name:String,
                          ...
                      }
    set self._inner-hash = {{HashTable-of {Tuple3-of tk1, tk2, tk3}, te}}
    set self._hash-array = {{Array-of int}}
    set self._key-array = {{Array-of {Tuple3-of tk1, tk2, tk3}}}
    set self._key-names = {{Array-of String} key1-name, key2-name, key3-name}
    {self.analyze-rest-args ...}
  }

  {doc-next
    {purpose
        すべての要素を削除します。
    }
  }
  {method public {clear}:void
    {self._inner-hash.clear}
    {self._hash-array.clear}
    {self._key-array.clear}
  }  

  {doc-next
    {purpose
        特定の要素を返します。
    }
    {parameter key1, 第一キー}
    {parameter key2, 第二キー}
    {parameter key3, 第三キー}
    {return-vals
        取得する要素。戻り値は self の要素と同じデータ型を持ちます。
    }
  } 
  {method public {get
                     key1:tk1, key2:tk2, key3:tk3
                 }:te
    
    def (value, found?) = {self.get-if-exists key1, key2, key3}
    {if found? then
        {return value}
     else
        {throw
            {KeyNotFoundException
                {format "キー '%s', '%s', '%s' が見つかりません", key1, key2, key3}
            }
        }
    }
  }

  {doc-next
    {purpose
        一部のキーを指定して要素を取得します。
    }
    {parameter ..., 指定したいキーは、'キーの名前 = 値' の形式で渡してください。}
    {return-vals
        取得する要素の配列。配列は self の要素と同じデータ型を持ちます。
    }
    {notes
        from-key-name コンストラクタを使用した場合にのみ利用可能です。
        default コンストラクタで作成したオブジェクトで使用した場合には、何も削除されません。
    }
  } 
  {method public {get-from-key-name ...}:{FastArray-of te}
    def (key1?, key2?, key3?, keys) = {self.make-keys-from-key-name  ...}
    def (indexes, index, found?) = {self.get-indexes-if-key-exists
                                       check-key1? = key1?,
                                       check-key2? = key2?,
                                       check-key3? = key3?,
                                       keys
                                   }
    def values = {{FastArray-of te} max-size = self._inner-hash.size}
    {if found? then
        {for index:int in indexes do
            {values.append
                self._inner-hash[self._key-array[index]]
            }
        }
    }
    {return values}
  }
  
  {doc-next
    {purpose
        キーでインデックス付けされた要素と、示された要素が見つかったかどうかを示すブール値を返します。
    }
    {parameter key1, 第一キー}
    {parameter key2, 第二キー}
    {parameter key3, 第三キー}
    {return-vals
        {paragraph
            このメソッドは次の 2 つの値を返します。
            {itemize
                {item 最初に返される値は、キーでインデックス付けされた要素です。}
                {item 2 番目に返される値は、特定のキーを持つオブジェクトが self 内に存在するかどうかを示すブール値です。}
            }
            2 番目に返される値が false の場合、最初に返される値は不確定です。
        }
    }
  } 
  {method public {get-if-exists
                     key1:tk1, key2:tk2, key3:tk3
                 }:(value:te, found?:bool)
    def keys = {{Tuple3-of tk1, tk2, tk3} key1, key2, key3}
    def (index, found?) = {self.get-index-if-key-exists keys}
    let value:te = {uninitialized-value-for-type te}
    {if found? then
        set value = self._inner-hash[self._key-array[index]]
    }
    {return (value, found?)}
  }

  {doc-next
    {purpose
        特定のキーを返します。
    }
    {parameter key1, 第一キー}
    {parameter key2, 第二キー}
    {parameter key3, 第三キー}
    {return-vals
        キー。戻り値は、self のキーと同じデータ型を持ちます。
    }
  }
  {method public {get-key
                     key1:tk1, key2:tk2, key3:tk3
                 }:(key1:tk1, key2:tk2, key3:tk3)
    def (k1, k2, k3, found?) = {self.get-key-if-exists key1, key2, key3}
    {if found? then
        {return
            (k1, k2, k3)
        }
     else
        {throw
            {KeyNotFoundException
                {format "キー '%s', '%s', '%s' が見つかりません", key1, key2, key3}
            }
        }
    }
  }

  {doc-next
    {purpose
        特定のキーと、示された要素が見つかったかどうかを示すブール値を返します。
    }
    {parameter key1, 第一キー}
    {parameter key2, 第二キー}
    {parameter key3, 第三キー}
    {return-vals
        指定されたキーに等しいコンテナが使用しているキー。
        戻り値は、self のキーと同じデータ型を持ちます。また、キーが見つかったかどうかを示すフラグを返します。
    }
  } 
  {method public {get-key-if-exists
                     key1:tk1, key2:tk2, key3:tk3
                 }:(key1:tk1, key2:tk2, key3:tk3, found?:bool)
    def keys = {{Tuple3-of tk1, tk2, tk3} key1, key2, key3}
    def (index, found?) = {self.get-index-if-key-exists keys}
    let key1:tk1 = {uninitialized-value-for-type tk1}
    let key2:tk2 = {uninitialized-value-for-type tk2}
    let key3:tk3 = {uninitialized-value-for-type tk3}
    {if found? then
        set key1 = self._key-array[index].t0
        set key2 = self._key-array[index].t1
        set key3 = self._key-array[index].t2
    }
    {return
        (key1, key2, key3, found?)
    }
  }

  {doc-next
    {purpose キーが存在するかどうかを調べます。}
    {parameter key1, 第一キー}
    {parameter key2, 第二キー}
    {parameter key3, 第三キー}
    {return-vals
        bool 値。値が self のキーである場合、このメソッドは true を返します。
        それ以外の場合は、false を返します。
    }
  }
  {method public {key-exists?
                     key1:tk1, key2:tk2, key3:tk3
                 }:bool
    def keys = {{Tuple3-of tk1, tk2, tk3} key1, key2, key3}
    def (index, found?) = {self.get-index-if-key-exists keys}
    {return found?}
  }

  {doc-next
    {purpose コレクションの各キーを含む {docref Iterator-of} を返します。}
    {return-vals
        {docref Tuple3-of} 型の {docref Iterator-of} を返します。
    }
  }
  {method public {keys-to-Iterator}:{Iterator-of {Tuple3-of tk1, tk2, tk3}}
    {return
        {self._key-array.to-Iterator}
    }
  }

  {doc-next
    {purpose
        要素を削除します。
    }
    {parameter key1, 第一キー}
    {parameter key2, 第二キー}
    {parameter key3, 第三キー}
  }
  {method public {remove key1:tk1, key2:tk2, key3:tk3}:void
    def keys = {{Tuple3-of tk1, tk2, tk3} key1, key2, key3}
    def (index, found?) = {self.get-index-if-key-exists keys}
    {if found? then
        {self._inner-hash.remove self._key-array[index]}
        {self._hash-array.remove index}
        {self._key-array.remove index}
     else
        {throw
            {KeyNotFoundException
                {format "キー '%s', '%s', '%s' が見つかりません", key1, key2, key3}
            }
        }
    }
  }

  {doc-next
    {purpose
        一部のキーを指定して要素を削除します。
    }
    {parameter ..., 指定したいキーは、'キーの名前 = 値' の形式で渡してください。}
    {notes
        from-key-name コンストラクタを使用した場合にのみ利用可能です。
        default コンストラクタで作成したオブジェクトで使用した場合には、何も削除されません。
    }
  }
  {method public {remove-from-key-name ...}:void
    def (key1?, key2?, key3?, keys) = {self.make-keys-from-key-name  ...}
    def (indexes, index, found?) = {self.get-indexes-if-key-exists
                                       check-key1? = key1?,
                                       check-key2? = key2?,
                                       check-key3? = key3?,
                                       keys
                                   }
    {if found? then
        {indexes.sort
            comparison-proc = {proc {x:int, y:int}:bool
                                  {return x <= y}
                              }
        }
        {for i:int = indexes.size - 1 downto 0 do
            let index:int = indexes[i]
            {self._inner-hash.remove self._key-array[index]}
            {self._hash-array.remove index}
            {self._key-array.remove index}
        }
     else
        {throw
            {KeyNotFoundException
                "キーが見つかりません"
            }
        }
    }
  }

  {doc-next
    {purpose 要素の値を設定します。}
    {parameter key1, 第一キー}
    {parameter key2, 第二キー}
    {parameter key3, 第三キー}
    {parameter val, 値}
  }
  {method public {set key1:tk1, key2:tk2, key3:tk3, val:te}:void
    def keys = {{Tuple3-of tk1, tk2, tk3} key1, key2, key3}
    def (index, found?) = {self.get-index-if-key-exists keys}
    {if found? then
        {self._inner-hash.set self._key-array[index], val}
     else
        {if index > -1 then
            {self._hash-array.insert {self.get-hash-code keys}, index + 1}
            {self._key-array.insert keys, index + 1}
         else
            {self._hash-array.append {self.get-hash-code keys}}
            {self._key-array.append keys}
        }
        {self._inner-hash.set keys, val}
    }
  }

  {doc-next
    {purpose
        self の要素を生成する {docref Iterator-of} を返します。
    }
    {return-vals
        self の要素と同じパラメータ化データ型を持つ {docref Iterator-of}。
    }
  }
  {method public {to-Iterator}:{Iterator-of te}
    def val-array = {{Array-of te}}
    {for k in self._key-array do
        {val-array.append self._inner-hash[k]}
    }
    {return
        {val-array.to-Iterator}
    }
  }

  {doc-next
    {purpose
        {docref Tuple3-of} 型のキーの内部的インデックスと、
        キーが見つかったかどうかを示すブール値を返します。
    }
    {parameter keys, {docref Tuple3-of} 型のキー}
    {return-vals
        {paragraph
            このメソッドは次の 2 つの値を返します。
            {itemize
                {item 最初に返される値は、キーの内部的インデックスです。}
                {item 2 番目に返される値は、特定のキーが self 内に存在するかどうかを示すブール値です。}
            }
            2 番目に返される値が false の場合、最初に返される値は-1です。
        }
    }
  }
  {method private {get-index-if-key-exists
                      keys:{Tuple3-of tk1, tk2, tk3}
                  }:(index:int, found?:bool)
    def (indexes, index, found?) = {self.get-indexes-if-key-exists keys}
    {return index, found?}
  }
  
  {doc-next
    {purpose
        キーワード引数からキーが指定されたかどうかと、{docref Tuple3-of} 型のキーを取得します。
    }
    {parameter ..., 指定したいキーは、'キーの名前 = 値' の形式で渡してください。}
    {return-vals
        {paragraph
            このメソッドは次の 4 つの値を返します。
            {itemize
                {item 第一キーが指定されたかどうか。}
                {item 第二キーが指定されたかどうか。}
                {item 第三キーが指定されたかどうか。}
                {item {docref Tuple3-of} 型のキー。}
            }            
        }
    }
  }
  {method private {make-keys-from-key-name ...}:(key1?:bool, key2?:bool, key3?:bool, keys:{Tuple3-of tk1, tk2, tk3})
    let t0:tk1 = {uninitialized-value-for-type tk1}
    let t1:tk2 = {uninitialized-value-for-type tk2}
    let t2:tk3 = {uninitialized-value-for-type tk3}
    let (key1?:bool, key2?:bool, key3?:bool)
    {with-compiler-directives allow-implicit-any-casts? = true do
        {for (val, key:#String) key index:int in ... do
            {if key == null then {continue}}
            def key-name-index = {self._key-names.find {non-null key}}
            {if key-name-index == -1 then
                {throw {KeyNotFoundException "キーの名前が見つかりません"}}
            }
            {switch key-name-index
             case 0 do
                set key1? = true
                set t0 = val
             case 1 do
                set key2? = true
                set t1 = val
             case 2 do
                set key3? = true
                set t2 = val
            }
        }
    }
    {return
        (key1?, key2?, key3?,  {{Tuple3-of tk1, tk2, tk3} t0, t1, t2})
    }
  }

  {doc-next
    {purpose
        {docref Tuple3-of} 型のキーからハッシュ値を生成します。
    }
    {parameter keys, {docref Tuple3-of} 型のキー}
    {return-vals ハッシュ値}
  }
  {method private {get-hash-code keys:{Tuple3-of tk1, tk2, tk3}}:int
    let hash-code:int = 0
    {for i:int = 0 below keys.size do
        let val:any = keys[i]
        set hash-code = {bit-xor hash-code, {value-hash val}}
    }
    {return hash-code}
  }

  {doc-next
    {purpose
        残余引数を解析し、自身の set メソッドを呼び出します。
    }
  }
  {method private {analyze-rest-args ...}:void
    let key1:tk1 = {uninitialized-value-for-type tk1}
    let key2:tk2 = {uninitialized-value-for-type tk2}
    let key3:tk3 = {uninitialized-value-for-type tk3}
    let v:te = {uninitialized-value-for-type te}
    let position:int = 1
    {with-compiler-directives allow-implicit-any-casts? = true do
        {for (val, key:#String) key index:int in ... do
            {switch position mod 4
             case 1 do
                {if val isa tk1 then
                    set key1 = val
                 else
                    ||throw syntax error
                }
             case 2 do
                {if val isa tk2 then
                    set key2 = val
                 else
                    ||throw syntax error
                }
             case 3 do
                {if val isa tk3 then
                    set key3 = val
                 else
                    ||throw syntax error
                }
             case 0 do
                {if val isa te then
                    set v = val
                 else
                    ||throw syntax error
                }
                {self.set key1, key2, key3, v}
            }
            {inc position}
        }
    }
  }

  {doc-next
    {purpose
        {docref Tuple3-of} 型のキーの内部的インデックスの配列と、
        キーが見つかったかどうかを示すブール値を返します。
    }
    {parameter check-key1?, 第一キーをチェックするかどうか。}
    {parameter check-key2?, 第二キーをチェックするかどうか。}
    {parameter check-key3?, 第三キーをチェックするかどうか。}
    {parameter keys?, {docref Tuple3-of} 型のキー。}
    {return-vals
        {paragraph
            このメソッドは次の 3 つの値を返します。
            {itemize
                {item 最初に返される値は、キーの内部的インデックスの配列です。}
                {item 2 番目に返される値は、最初に見つかったキーの内部的インデックスです。}
                {item 3 番目に返される値は、特定のキーが self 内に存在するかどうかを示すブール値です。}
            }
            3 番目に返される値が false の場合、2 番目に返される値は-1です。
        }
    }
  }
  {method private {get-indexes-if-key-exists
                      check-key1?:bool = true,
                      check-key2?:bool = true,
                      check-key3?:bool = true,
                      keys:{Tuple3-of tk1, tk2, tk3}
                  }:({Array-of int}, int, bool) 
    let forward-index:int = 0
    let backward-index:int = self._hash-array.size - 1
    let hash-code:int = -1
    {if check-key1? and check-key2? and check-key3? then
        set hash-code = {self.get-hash-code keys}
        set forward-index = {self._hash-array.find hash-code, search-direction = SearchDirection.forward}
    }
     def indexes = {{Array-of int}}
    let first-found-index:int = -1
    {if forward-index > -1 then
        {for index:int = forward-index to backward-index do
            {if hash-code != -1 and hash-code != self._hash-array[index] then {break}}
            {if (not check-key1? or (check-key1? and self._key-array[index].t0 == keys.t0)) and
                (not check-key2? or (check-key2? and self._key-array[index].t1 == keys.t1)) and
                (not check-key3? or (check-key3? and self._key-array[index].t2 == keys.t2)) then
                {indexes.append index}
                {if first-found-index == -1 then
                    set first-found-index = index
                }
            }
        }
    }
    {return indexes,  first-found-index, indexes.size > 0}
  }
  

  
  {doc-next
    {purpose コレクションの要素数を返します。}
    {return-vals self の要素数を示すint。}
  }
  {getter public {size}:int
    {return
        self._inner-hash.size
    }
  }
}


|| alias (shorthand for something)
{doc-next
    {purpose
        {curl-code
            {MultiKeyHashTable-3-of any, any, any, any}の略記法
        }
    }
}
{def public MultiKeyHashTable-3:ParameterizedType = {MultiKeyHashTable-3-of any, any, any, any}}

