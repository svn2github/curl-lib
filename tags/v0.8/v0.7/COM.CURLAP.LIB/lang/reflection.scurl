||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @authors Yoshitaka Fukuta, Hitoshi Okada
|||

{doc-next
    {purpose {param type} の全てのスーパークラスを深さ優先でトラバースします。}
    {parameter type,
        スーパークラスをトラバースする対象の {docref ClassType}。
    }
    {parameter thunk,
        各スーパークラスに適用されるプロシージャ。{param thunk} が
        {ctext false} を返すと繰り返しは終了します。
    }
    {parameter ignore-classes,
        スーパークラスがこの {ctext {{docref Set-of} {docref ClassType}}}
        に含まれる場合は {param thunk} が適用されません。
    }
    {details
        複数回継承されている {ctext shared} クラスは、初回のトラバース時のみ
        {param thunk} が適用され、2回目以降はスキップされます。
    }
}
{define-proc public {visit-super-classes
                        type:ClassType,
                        thunk:{proc-type {ClassType}:bool},
                        ignore-classes:#{Set-of ClassType} = null
                    }:bool
    {if ignore-classes == null then
        set ignore-classes = {{Set-of ClassType}}
    }
    let canceled?:bool = false
    {type.for-each-base-class
        {proc {ct:ClassType}:bool
            {if {ignore-classes.member? ct} then
                {return true}
            }
            {ignore-classes.insert ct}
            let continue?:bool = {thunk ct}
            {if continue? then
                set canceled? =
                    {visit-super-classes
                        ct,
                        thunk,
                        ignore-classes = ignore-classes
                    }
             else
                set canceled? = true
            }
            {return continue? and not canceled?}
        }
    }
    {return canceled?}
}

{doc-next
    {purpose ClassTypeから新しいオブジェクトを生成します。}
    {parameter class-type, クラスのタイプ}
    {parameter maker-name, コンストラクタ名もしくはファンクション名}
    {parameter ..., コンストラクタもしくはファンクションへの引数}
    {return-vals 指定したクラスのオブジェクト}
}
{define-proc public inline {new-instance
                               class-type:ClassType,
                               maker-name:String = "default",
                               ...
                           }:any
    {return
        {{class-type.get-instance-maker
             maker-name
         }.new {splice ...}}
    }
}

{doc-next
    {purpose
        文字列のクラス名から新しいオブジェクトを生成します。（パッケージ名．クラス名で指定します。）
        また、残余引数（...）でコンストラクタの引数を指定します。
    }
    {parameter class-type, クラス名前（パッケージ名+クラス名）}
    {parameter maker-name, コンストラクタ名もしくはファンクション名}
    {parameter ..., コンストラクタもしくはファンクションへの引数}
    {return-vals 指定したクラスのオブジェクト}
}
{define-proc public inline {new-instance-from-string 
                               class-name:String,
                               maker-name:String = "default",
                               ...
                           }:any 
    
    def index = 
        {class-name.find '.', search-direction = SearchDirection.backward}
    def package =
        {import-package
            {ComponentSelector name = {String {class-name.substr 0, index}}}}
    || new instance
    {return
        {{{{package.get-member 
               {class-name.tail index + 1}
           }.get-value}.get-instance-maker maker-name
         }.new {splice ...}}
    }
}
