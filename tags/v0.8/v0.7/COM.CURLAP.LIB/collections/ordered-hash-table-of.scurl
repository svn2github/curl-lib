||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @authors Izumi Kashiwagi, Yoshitaka Fukuta
|||

{curl-file-attributes character-encoding = "utf8"}

{doc-next
    {purpose
        追加した順番が保存される {docref HashTable-of} です。
    }
}
{define-class public serializable open {OrderedHashTable-of tk:Type, te:Type}
  {inherits {HashTable-of tk, te}}

  || FIXME: initial value is a workaround for the error produced on deserializing this object
  field package constant _order-array:{Array-of tk} = {new {Array-of tk}}

  {doc-next
    {purpose キーの配列}
  }
  {getter public open {ordered-keys}:{Array-of tk}
    {return self._order-array}
  }

  || 再ハッシュ中かどうか
  field private _rehashing?:bool = false
  
  {doc-next
    {purpose {ctext OrderedHashTable-of} を初期化します。}
  }
  {constructor public {default efficient-size:int = 4, ...:any}
    set self._order-array =
        {new {Array-of tk}, efficient-size = efficient-size}
    {construct-super efficient-size = efficient-size, ...}
  }

  {doc-next
    {purpose {ctext OrderedHashTable-of} を初期化します。}
    {parameter from,
        {ctext self} の初期の内容は {param from} からコピーされます。
    }
  }
  {constructor public {clone-from
                          from:{OrderedHashTable-of tk, te}
                      }
    {construct-super.clone-from from}
    set self._order-array = {from._order-array.clone}
  }

  {doc-next
    {purpose すべての要素を削除します。}
  }
  {method public {clear}:void
    {super.clear}
    {self._order-array.clear}
  }

  || docs inherited
  {method public open {clone}:{OrderedHashTable-of tk, te}
    {return {{OrderedHashTable-of tk, te}.clone-from self}}
  }

  {doc-next
    {purpose 要素を削除します。}
  }
  {method public {remove
                     key:tk,
                     length:int = 1,
                     error-if-missing?:bool = true
                 }:void
    def old-size = self.size
    {super.remove key, length = length,
        error-if-missing? = error-if-missing?}
    {if old-size != self.size then
        def index = {self._order-array.find key}
        {if index >= 0 then
            {self._order-array.remove index}
        }
    }
  }

  {doc-next
    {purpose {ctext self} の {ctext efficient-size} を取得または設定します。}
  }
  {setter public open {efficient-size requested-size:int}:void
    set self._order-array.efficient-size = requested-size
    {with self._rehashing? = true do
        set super.efficient-size = requested-size
    }
  }

  {doc-next
    {purpose {ctext self} を再ハッシュします。}
  }
  {method public open {rehash}:void
    {with self._rehashing? = true do
        {super.rehash}
    }
  }

  {doc-next
    {purpose 特定のインデックスの要素を設定します。}
    {parameter index, 設定する要素のインデックスを示します。}
    {parameter element, 設定する要素の値。}
  }
  {method public {set key:tk, element:te}:void
    def old-size = self.size
    {super.set key, element}
    {if old-size == self.size then
        def index = {self._order-array.find key}
        {if index >= 0 then
            {self._order-array.remove index}
        }
     elseif self._rehashing? then
        {return}
    }    
    {self._order-array.append key}
  }

  || doc inherited
  {method public open {to-Iterator}:{Iterator-of te}
    {return
        {new
            {Ordered-HashTable-element-Iterator-of
                te,
                {compile-time-type-of self}
            },
            self
        }
    }
  }

  || docs inherited
  {method public open {keys-to-Iterator}:{Iterator-of tk}
    {return {self._order-array.to-Iterator}}
  }

  {doc-next
    {purpose {param index} 番目のキーと値を取得します。}
    {parameter index, 追加した順番。}
    {return-vals 
        このメソッドは次の 2 つの値を返します。
        {itemize
            {item 最初に返される値は {param index} でインデックス付けされたキーです。}
            {item  2 番目に返される値は {param index} でインデックス付けされた値です。}
        }
    }
  }
  {method public open {get-by-index index:int}:(key:tk, value:te)
    def key = self._order-array[index]
    {return key, self[key]}
  }

  {doc-next
    {purpose
        {param index} 番目のキーと値と、該当するキーが見つかったかどうかを示す
        {docref bool} 値を返します。
    }
    {parameter index, 追加した順番。}
    {return-vals 
        このメソッドは次の 3 つの値を返します。
        {itemize
            {item 最初に返される値は {param index} でインデックス付けされたキーです。}
            {item  2 番目に返される値は {param index} でインデックス付けされた値です。}
            {item  3 番目に返される値は {param index} 番目にオブジェクトが存在するかどうかを示す
                {docref bool} 値です。
            }
        }
    }
  }
  {method public open {get-by-index-if-exists
                          index:int
                      }:(key:tk, value:te, found?:bool)
    {return 
        {if index < 0 or index >= self.size then
            ({uninitialized-value-for-type tk},
             {uninitialized-value-for-type te},
             false)
         else
            def key = self._order-array[index]
            (key, self[key], true)
        }
    }
  }
}

|| alias (shorthand for something)
{doc-next
    {purpose
        {ctext {{docref OrderedHashTable-of} {docref any}, {docref any}}}
        の略記法。
    }
}
{def public OrderedHashTable:ParameterizedType = {OrderedHashTable-of any, any}}


{define-class package final
  {Ordered-HashTable-element-Iterator-of te:Type, htt:Type}
  {inherits {Iterator-of te}}
  
  field package constant ht:htt
  field private initial-size:int
  field private index:int
  
  {constructor package {default ht:htt}
    set self.ht = ht
    {self.reset}
  }
  
  {method public {reset}:void
    set self.initial-size = self.ht.size
    set self.index = 0
  }
  
  {method private {assert-size-unchanged}:void
    {if self.ht.size != self.initial-size then
        {error
            {hlformat "%s.size changed while iterating over the container.",
                self.ht,
                comment = "%s is a container object. Do not translate 'size'."
            }
        }
    }
  }
  {method public {read-one}:(element:te, eof?:bool)
    {self.assert-size-unchanged}
    {return 
        {if self.index >= self.ht.size then
            ({uninitialized-value-for-type te}, true)
         else
            def index = self.index
            set self.index = index + 1
            (self.ht[self.ht._order-array[index]], false)
        }
    }
  }
 }